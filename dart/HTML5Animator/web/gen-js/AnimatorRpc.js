//
// Autogenerated by Thrift Compiler (0.9.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AnimatorRpc_ping_args = function(args) {
};
AnimatorRpc_ping_args.prototype = {};
AnimatorRpc_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_ping_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_ping_result.prototype = {};
AnimatorRpc_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_ping_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_getMyself_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AnimatorRpc_getMyself_args.prototype = {};
AnimatorRpc_getMyself_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_getMyself_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_getMyself_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_getMyself_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_getMyself_result.prototype = {};
AnimatorRpc_getMyself_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_getMyself_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_getMyself_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_validateToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AnimatorRpc_validateToken_args.prototype = {};
AnimatorRpc_validateToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_validateToken_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_validateToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_validateToken_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_validateToken_result.prototype = {};
AnimatorRpc_validateToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_validateToken_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_validateToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_login_args = function(args) {
  this.token = null;
  this.email = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AnimatorRpc_login_args.prototype = {};
AnimatorRpc_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_login_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_login_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_login_result.prototype = {};
AnimatorRpc_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_login_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_createAccount_args = function(args) {
  this.token = null;
  this.email = null;
  this.name = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AnimatorRpc_createAccount_args.prototype = {};
AnimatorRpc_createAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_createAccount_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_createAccount_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_createAccount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_createAccount_result.prototype = {};
AnimatorRpc_createAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_createAccount_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_createAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_logout_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AnimatorRpc_logout_args.prototype = {};
AnimatorRpc_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_logout_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_logout_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_logout_result = function(args) {
  this.e = null;
  if (args instanceof NotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AnimatorRpc_logout_result.prototype = {};
AnimatorRpc_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new NotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_logout_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_logout_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_changePassword_args = function(args) {
  this.token = null;
  this.oldPassword = null;
  this.newPassword = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.oldPassword !== undefined) {
      this.oldPassword = args.oldPassword;
    }
    if (args.newPassword !== undefined) {
      this.newPassword = args.newPassword;
    }
  }
};
AnimatorRpc_changePassword_args.prototype = {};
AnimatorRpc_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_changePassword_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.oldPassword !== null && this.oldPassword !== undefined) {
    output.writeFieldBegin('oldPassword', Thrift.Type.STRING, 2);
    output.writeString(this.oldPassword);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 3);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_changePassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof NotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AnimatorRpc_changePassword_result.prototype = {};
AnimatorRpc_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new NotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_changePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_changeUsername_args = function(args) {
  this.token = null;
  this.newUsername = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.newUsername !== undefined) {
      this.newUsername = args.newUsername;
    }
  }
};
AnimatorRpc_changeUsername_args.prototype = {};
AnimatorRpc_changeUsername_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newUsername = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_changeUsername_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_changeUsername_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.newUsername !== null && this.newUsername !== undefined) {
    output.writeFieldBegin('newUsername', Thrift.Type.STRING, 2);
    output.writeString(this.newUsername);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_changeUsername_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof NotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AnimatorRpc_changeUsername_result.prototype = {};
AnimatorRpc_changeUsername_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new NotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_changeUsername_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_changeUsername_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_emailPassword_args = function(args) {
  this.emailAddress = null;
  if (args) {
    if (args.emailAddress !== undefined) {
      this.emailAddress = args.emailAddress;
    }
  }
};
AnimatorRpc_emailPassword_args.prototype = {};
AnimatorRpc_emailPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.emailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_emailPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_emailPassword_args');
  if (this.emailAddress !== null && this.emailAddress !== undefined) {
    output.writeFieldBegin('emailAddress', Thrift.Type.STRING, 1);
    output.writeString(this.emailAddress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_emailPassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_emailPassword_result.prototype = {};
AnimatorRpc_emailPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_emailPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_emailPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_getMyData_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
AnimatorRpc_getMyData_args.prototype = {};
AnimatorRpc_getMyData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_getMyData_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_getMyData_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_getMyData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_getMyData_result.prototype = {};
AnimatorRpc_getMyData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_getMyData_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_getMyData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_sendClientError_args = function(args) {
  this.errorInfo = null;
  if (args) {
    if (args.errorInfo !== undefined) {
      this.errorInfo = args.errorInfo;
    }
  }
};
AnimatorRpc_sendClientError_args.prototype = {};
AnimatorRpc_sendClientError_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorInfo = new ClientErrorInfo();
        this.errorInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_sendClientError_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_sendClientError_args');
  if (this.errorInfo !== null && this.errorInfo !== undefined) {
    output.writeFieldBegin('errorInfo', Thrift.Type.STRUCT, 1);
    this.errorInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_sendClientError_result = function(args) {
};
AnimatorRpc_sendClientError_result.prototype = {};
AnimatorRpc_sendClientError_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_sendClientError_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_sendClientError_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_loadMovie_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
AnimatorRpc_loadMovie_args.prototype = {};
AnimatorRpc_loadMovie_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_loadMovie_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_loadMovie_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_loadMovie_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AnimatorRpc_loadMovie_result.prototype = {};
AnimatorRpc_loadMovie_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Movie();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_loadMovie_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_loadMovie_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_saveMovie_args = function(args) {
  this.movie = null;
  if (args) {
    if (args.movie !== undefined) {
      this.movie = args.movie;
    }
  }
};
AnimatorRpc_saveMovie_args.prototype = {};
AnimatorRpc_saveMovie_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.movie = new Movie();
        this.movie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_saveMovie_args.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_saveMovie_args');
  if (this.movie !== null && this.movie !== undefined) {
    output.writeFieldBegin('movie', Thrift.Type.STRUCT, 1);
    this.movie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpc_saveMovie_result = function(args) {
};
AnimatorRpc_saveMovie_result.prototype = {};
AnimatorRpc_saveMovie_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnimatorRpc_saveMovie_result.prototype.write = function(output) {
  output.writeStructBegin('AnimatorRpc_saveMovie_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnimatorRpcClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AnimatorRpcClient.prototype = {};
AnimatorRpcClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    return this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

AnimatorRpcClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ping failed: unknown result';
};
AnimatorRpcClient.prototype.getMyself = function(token, callback) {
  if (callback === undefined) {
    this.send_getMyself(token);
    return this.recv_getMyself();
  } else {
    var postData = this.send_getMyself(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMyself);
  }
};

AnimatorRpcClient.prototype.send_getMyself = function(token, callback) {
  this.output.writeMessageBegin('getMyself', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_getMyself_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_getMyself = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_getMyself_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMyself failed: unknown result';
};
AnimatorRpcClient.prototype.validateToken = function(token, callback) {
  if (callback === undefined) {
    this.send_validateToken(token);
    return this.recv_validateToken();
  } else {
    var postData = this.send_validateToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_validateToken);
  }
};

AnimatorRpcClient.prototype.send_validateToken = function(token, callback) {
  this.output.writeMessageBegin('validateToken', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_validateToken_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_validateToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_validateToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'validateToken failed: unknown result';
};
AnimatorRpcClient.prototype.login = function(token, email, password, callback) {
  if (callback === undefined) {
    this.send_login(token, email, password);
    return this.recv_login();
  } else {
    var postData = this.send_login(token, email, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_login);
  }
};

AnimatorRpcClient.prototype.send_login = function(token, email, password, callback) {
  this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_login_args();
  args.token = token;
  args.email = email;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};
AnimatorRpcClient.prototype.createAccount = function(token, email, name, password, callback) {
  if (callback === undefined) {
    this.send_createAccount(token, email, name, password);
    return this.recv_createAccount();
  } else {
    var postData = this.send_createAccount(token, email, name, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createAccount);
  }
};

AnimatorRpcClient.prototype.send_createAccount = function(token, email, name, password, callback) {
  this.output.writeMessageBegin('createAccount', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_createAccount_args();
  args.token = token;
  args.email = email;
  args.name = name;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_createAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_createAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createAccount failed: unknown result';
};
AnimatorRpcClient.prototype.logout = function(token, callback) {
  if (callback === undefined) {
    this.send_logout(token);
    this.recv_logout();
  } else {
    var postData = this.send_logout(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_logout);
  }
};

AnimatorRpcClient.prototype.send_logout = function(token, callback) {
  this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_logout_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
AnimatorRpcClient.prototype.changePassword = function(token, oldPassword, newPassword, callback) {
  if (callback === undefined) {
    this.send_changePassword(token, oldPassword, newPassword);
    return this.recv_changePassword();
  } else {
    var postData = this.send_changePassword(token, oldPassword, newPassword, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changePassword);
  }
};

AnimatorRpcClient.prototype.send_changePassword = function(token, oldPassword, newPassword, callback) {
  this.output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_changePassword_args();
  args.token = token;
  args.oldPassword = oldPassword;
  args.newPassword = newPassword;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_changePassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_changePassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changePassword failed: unknown result';
};
AnimatorRpcClient.prototype.changeUsername = function(token, newUsername, callback) {
  if (callback === undefined) {
    this.send_changeUsername(token, newUsername);
    return this.recv_changeUsername();
  } else {
    var postData = this.send_changeUsername(token, newUsername, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeUsername);
  }
};

AnimatorRpcClient.prototype.send_changeUsername = function(token, newUsername, callback) {
  this.output.writeMessageBegin('changeUsername', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_changeUsername_args();
  args.token = token;
  args.newUsername = newUsername;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_changeUsername = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_changeUsername_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeUsername failed: unknown result';
};
AnimatorRpcClient.prototype.emailPassword = function(emailAddress, callback) {
  if (callback === undefined) {
    this.send_emailPassword(emailAddress);
    return this.recv_emailPassword();
  } else {
    var postData = this.send_emailPassword(emailAddress, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_emailPassword);
  }
};

AnimatorRpcClient.prototype.send_emailPassword = function(emailAddress, callback) {
  this.output.writeMessageBegin('emailPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_emailPassword_args();
  args.emailAddress = emailAddress;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_emailPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_emailPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'emailPassword failed: unknown result';
};
AnimatorRpcClient.prototype.getMyData = function(token, callback) {
  if (callback === undefined) {
    this.send_getMyData(token);
    return this.recv_getMyData();
  } else {
    var postData = this.send_getMyData(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMyData);
  }
};

AnimatorRpcClient.prototype.send_getMyData = function(token, callback) {
  this.output.writeMessageBegin('getMyData', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_getMyData_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_getMyData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_getMyData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMyData failed: unknown result';
};
AnimatorRpcClient.prototype.sendClientError = function(errorInfo, callback) {
  if (callback === undefined) {
    this.send_sendClientError(errorInfo);
    this.recv_sendClientError();
  } else {
    var postData = this.send_sendClientError(errorInfo, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sendClientError);
  }
};

AnimatorRpcClient.prototype.send_sendClientError = function(errorInfo, callback) {
  this.output.writeMessageBegin('sendClientError', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_sendClientError_args();
  args.errorInfo = errorInfo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_sendClientError = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_sendClientError_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
AnimatorRpcClient.prototype.loadMovie = function(id, callback) {
  if (callback === undefined) {
    this.send_loadMovie(id);
    return this.recv_loadMovie();
  } else {
    var postData = this.send_loadMovie(id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadMovie);
  }
};

AnimatorRpcClient.prototype.send_loadMovie = function(id, callback) {
  this.output.writeMessageBegin('loadMovie', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_loadMovie_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_loadMovie = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_loadMovie_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'loadMovie failed: unknown result';
};
AnimatorRpcClient.prototype.saveMovie = function(movie, callback) {
  if (callback === undefined) {
    this.send_saveMovie(movie);
    this.recv_saveMovie();
  } else {
    var postData = this.send_saveMovie(movie, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_saveMovie);
  }
};

AnimatorRpcClient.prototype.send_saveMovie = function(movie, callback) {
  this.output.writeMessageBegin('saveMovie', Thrift.MessageType.CALL, this.seqid);
  var args = new AnimatorRpc_saveMovie_args();
  args.movie = movie;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnimatorRpcClient.prototype.recv_saveMovie = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnimatorRpc_saveMovie_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
