//
// Autogenerated by Thrift Compiler (0.9.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

User = function(args) {
  this.id = '';
  this.name = null;
  this.ipAddress = null;
  this.loggedIn = false;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.ipAddress !== undefined) {
      this.ipAddress = args.ipAddress;
    }
    if (args.loggedIn !== undefined) {
      this.loggedIn = args.loggedIn;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.loggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ipAddress !== null && this.ipAddress !== undefined) {
    output.writeFieldBegin('ipAddress', Thrift.Type.STRING, 3);
    output.writeString(this.ipAddress);
    output.writeFieldEnd();
  }
  if (this.loggedIn !== null && this.loggedIn !== undefined) {
    output.writeFieldBegin('loggedIn', Thrift.Type.BOOL, 4);
    output.writeBool(this.loggedIn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserData = function(args) {
  this.id = '';
  this.lastVisited = {
};
  this.bookmarks = {
};
  this.favoriteComics = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.lastVisited !== undefined) {
      this.lastVisited = args.lastVisited;
    }
    if (args.bookmarks !== undefined) {
      this.bookmarks = args.bookmarks;
    }
    if (args.favoriteComics !== undefined) {
      this.favoriteComics = args.favoriteComics;
    }
  }
};
UserData.prototype = {};
UserData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.lastVisited = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.lastVisited[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 129:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.bookmarks = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          var _size16 = 0;
          var _rtmp320;
          val15 = [];
          var _etype19 = 0;
          _rtmp320 = input.readSetBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21)
          {
            var elem22 = null;
            elem22 = input.readString().value;
            val15.push(elem22);
          }
          input.readSetEnd();
          this.bookmarks[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 130:
      if (ftype == Thrift.Type.SET) {
        var _size23 = 0;
        var _rtmp327;
        this.favoriteComics = [];
        var _etype26 = 0;
        _rtmp327 = input.readSetBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString().value;
          this.favoriteComics.push(elem29);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserData.prototype.write = function(output) {
  output.writeStructBegin('UserData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.lastVisited !== null && this.lastVisited !== undefined) {
    output.writeFieldBegin('lastVisited', Thrift.Type.MAP, 128);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.lastVisited));
    for (var kiter30 in this.lastVisited)
    {
      if (this.lastVisited.hasOwnProperty(kiter30))
      {
        var viter31 = this.lastVisited[kiter30];
        output.writeString(kiter30);
        output.writeString(viter31);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bookmarks !== null && this.bookmarks !== undefined) {
    output.writeFieldBegin('bookmarks', Thrift.Type.MAP, 129);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.bookmarks));
    for (var kiter32 in this.bookmarks)
    {
      if (this.bookmarks.hasOwnProperty(kiter32))
      {
        var viter33 = this.bookmarks[kiter32];
        output.writeString(kiter32);
        output.writeSetBegin(Thrift.Type.STRING, viter33.length);
        for (var iter34 in viter33)
        {
          if (viter33.hasOwnProperty(iter34))
          {
            iter34 = viter33[iter34];
            output.writeString(iter34);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.favoriteComics !== null && this.favoriteComics !== undefined) {
    output.writeFieldBegin('favoriteComics', Thrift.Type.SET, 130);
    output.writeSetBegin(Thrift.Type.STRING, this.favoriteComics.length);
    for (var iter35 in this.favoriteComics)
    {
      if (this.favoriteComics.hasOwnProperty(iter35))
      {
        iter35 = this.favoriteComics[iter35];
        output.writeString(iter35);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInternal = function(args) {
  this.id = '';
  this.password = null;
  this.emailAddress = null;
  this.facbeookId = null;
  this.googleId = null;
  this.friends = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.emailAddress !== undefined) {
      this.emailAddress = args.emailAddress;
    }
    if (args.facbeookId !== undefined) {
      this.facbeookId = args.facbeookId;
    }
    if (args.googleId !== undefined) {
      this.googleId = args.googleId;
    }
    if (args.friends !== undefined) {
      this.friends = args.friends;
    }
  }
};
UserInternal.prototype = {};
UserInternal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.emailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.facbeookId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.googleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.SET) {
        var _size36 = 0;
        var _rtmp340;
        this.friends = [];
        var _etype39 = 0;
        _rtmp340 = input.readSetBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString().value;
          this.friends.push(elem42);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInternal.prototype.write = function(output) {
  output.writeStructBegin('UserInternal');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.emailAddress !== null && this.emailAddress !== undefined) {
    output.writeFieldBegin('emailAddress', Thrift.Type.STRING, 3);
    output.writeString(this.emailAddress);
    output.writeFieldEnd();
  }
  if (this.facbeookId !== null && this.facbeookId !== undefined) {
    output.writeFieldBegin('facbeookId', Thrift.Type.STRING, 4);
    output.writeString(this.facbeookId);
    output.writeFieldEnd();
  }
  if (this.googleId !== null && this.googleId !== undefined) {
    output.writeFieldBegin('googleId', Thrift.Type.STRING, 5);
    output.writeString(this.googleId);
    output.writeFieldEnd();
  }
  if (this.friends !== null && this.friends !== undefined) {
    output.writeFieldBegin('friends', Thrift.Type.SET, 128);
    output.writeSetBegin(Thrift.Type.STRING, this.friends.length);
    for (var iter43 in this.friends)
    {
      if (this.friends.hasOwnProperty(iter43))
      {
        iter43 = this.friends[iter43];
        output.writeString(iter43);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserSession = function(args) {
  this.id = '';
  this.userId = null;
  this.createTime = null;
  this.data = null;
  this.expirationTime = 0;
  this.accessTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.expirationTime !== undefined) {
      this.expirationTime = args.expirationTime;
    }
    if (args.accessTime !== undefined) {
      this.accessTime = args.accessTime;
    }
  }
};
UserSession.prototype = {};
UserSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.data = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          if (_i49 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key50 = null;
          var val51 = null;
          key50 = input.readString().value;
          val51 = input.readString().value;
          this.data[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.I64) {
        this.accessTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserSession.prototype.write = function(output) {
  output.writeStructBegin('UserSession');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 3);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.data));
    for (var kiter52 in this.data)
    {
      if (this.data.hasOwnProperty(kiter52))
      {
        var viter53 = this.data[kiter52];
        output.writeString(kiter52);
        output.writeString(viter53);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 5);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.accessTime !== null && this.accessTime !== undefined) {
    output.writeFieldBegin('accessTime', Thrift.Type.I64, 128);
    output.writeI64(this.accessTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientErrorInfo = function(args) {
  this.id = null;
  this.browser = null;
  this.version = null;
  this.message = null;
  this.url = null;
  this.lineNumber = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.lineNumber !== undefined) {
      this.lineNumber = args.lineNumber;
    }
  }
};
ClientErrorInfo.prototype = {};
ClientErrorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.browser = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lineNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientErrorInfo.prototype.write = function(output) {
  output.writeStructBegin('ClientErrorInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRING, 2);
    output.writeString(this.browser);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 5);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.lineNumber !== null && this.lineNumber !== undefined) {
    output.writeFieldBegin('lineNumber', Thrift.Type.I32, 6);
    output.writeI32(this.lineNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

