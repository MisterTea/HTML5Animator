//
// Autogenerated by Thrift Compiler (0.9.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Easing = {
'EASE_IN_LINEAR' : 0,
'EASE_IN_QUAD' : 1,
'EASE_OUT_QUAD' : 2,
'EASE_IN_OUT_QUAD' : 3,
'EASE_IN_CUBIC' : 4,
'EASE_OUT_CUBIC' : 5,
'EASE_IN_OUT_CUBIC' : 6
};
User = function(args) {
  this.id = '';
  this.name = null;
  this.ipAddress = null;
  this.loggedIn = false;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.ipAddress !== undefined) {
      this.ipAddress = args.ipAddress;
    }
    if (args.loggedIn !== undefined) {
      this.loggedIn = args.loggedIn;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.loggedIn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ipAddress !== null && this.ipAddress !== undefined) {
    output.writeFieldBegin('ipAddress', Thrift.Type.STRING, 3);
    output.writeString(this.ipAddress);
    output.writeFieldEnd();
  }
  if (this.loggedIn !== null && this.loggedIn !== undefined) {
    output.writeFieldBegin('loggedIn', Thrift.Type.BOOL, 4);
    output.writeBool(this.loggedIn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserData = function(args) {
  this.id = '';
  this.lastVisited = {
};
  this.bookmarks = {
};
  this.favoriteComics = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.lastVisited !== undefined) {
      this.lastVisited = args.lastVisited;
    }
    if (args.bookmarks !== undefined) {
      this.bookmarks = args.bookmarks;
    }
    if (args.favoriteComics !== undefined) {
      this.favoriteComics = args.favoriteComics;
    }
  }
};
UserData.prototype = {};
UserData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.lastVisited = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.lastVisited[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 129:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.bookmarks = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          var _size16 = 0;
          var _rtmp320;
          val15 = [];
          var _etype19 = 0;
          _rtmp320 = input.readSetBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21)
          {
            var elem22 = null;
            elem22 = input.readString().value;
            val15.push(elem22);
          }
          input.readSetEnd();
          this.bookmarks[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 130:
      if (ftype == Thrift.Type.SET) {
        var _size23 = 0;
        var _rtmp327;
        this.favoriteComics = [];
        var _etype26 = 0;
        _rtmp327 = input.readSetBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString().value;
          this.favoriteComics.push(elem29);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserData.prototype.write = function(output) {
  output.writeStructBegin('UserData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.lastVisited !== null && this.lastVisited !== undefined) {
    output.writeFieldBegin('lastVisited', Thrift.Type.MAP, 128);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.lastVisited));
    for (var kiter30 in this.lastVisited)
    {
      if (this.lastVisited.hasOwnProperty(kiter30))
      {
        var viter31 = this.lastVisited[kiter30];
        output.writeString(kiter30);
        output.writeString(viter31);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bookmarks !== null && this.bookmarks !== undefined) {
    output.writeFieldBegin('bookmarks', Thrift.Type.MAP, 129);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.bookmarks));
    for (var kiter32 in this.bookmarks)
    {
      if (this.bookmarks.hasOwnProperty(kiter32))
      {
        var viter33 = this.bookmarks[kiter32];
        output.writeString(kiter32);
        output.writeSetBegin(Thrift.Type.STRING, viter33.length);
        for (var iter34 in viter33)
        {
          if (viter33.hasOwnProperty(iter34))
          {
            iter34 = viter33[iter34];
            output.writeString(iter34);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.favoriteComics !== null && this.favoriteComics !== undefined) {
    output.writeFieldBegin('favoriteComics', Thrift.Type.SET, 130);
    output.writeSetBegin(Thrift.Type.STRING, this.favoriteComics.length);
    for (var iter35 in this.favoriteComics)
    {
      if (this.favoriteComics.hasOwnProperty(iter35))
      {
        iter35 = this.favoriteComics[iter35];
        output.writeString(iter35);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserInternal = function(args) {
  this.id = '';
  this.password = null;
  this.emailAddress = null;
  this.facbeookId = null;
  this.googleId = null;
  this.friends = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.emailAddress !== undefined) {
      this.emailAddress = args.emailAddress;
    }
    if (args.facbeookId !== undefined) {
      this.facbeookId = args.facbeookId;
    }
    if (args.googleId !== undefined) {
      this.googleId = args.googleId;
    }
    if (args.friends !== undefined) {
      this.friends = args.friends;
    }
  }
};
UserInternal.prototype = {};
UserInternal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.emailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.facbeookId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.googleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.SET) {
        var _size36 = 0;
        var _rtmp340;
        this.friends = [];
        var _etype39 = 0;
        _rtmp340 = input.readSetBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString().value;
          this.friends.push(elem42);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInternal.prototype.write = function(output) {
  output.writeStructBegin('UserInternal');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.emailAddress !== null && this.emailAddress !== undefined) {
    output.writeFieldBegin('emailAddress', Thrift.Type.STRING, 3);
    output.writeString(this.emailAddress);
    output.writeFieldEnd();
  }
  if (this.facbeookId !== null && this.facbeookId !== undefined) {
    output.writeFieldBegin('facbeookId', Thrift.Type.STRING, 4);
    output.writeString(this.facbeookId);
    output.writeFieldEnd();
  }
  if (this.googleId !== null && this.googleId !== undefined) {
    output.writeFieldBegin('googleId', Thrift.Type.STRING, 5);
    output.writeString(this.googleId);
    output.writeFieldEnd();
  }
  if (this.friends !== null && this.friends !== undefined) {
    output.writeFieldBegin('friends', Thrift.Type.SET, 128);
    output.writeSetBegin(Thrift.Type.STRING, this.friends.length);
    for (var iter43 in this.friends)
    {
      if (this.friends.hasOwnProperty(iter43))
      {
        iter43 = this.friends[iter43];
        output.writeString(iter43);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserSession = function(args) {
  this.id = '';
  this.userId = null;
  this.createTime = null;
  this.data = null;
  this.expirationTime = 0;
  this.accessTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.expirationTime !== undefined) {
      this.expirationTime = args.expirationTime;
    }
    if (args.accessTime !== undefined) {
      this.accessTime = args.accessTime;
    }
  }
};
UserSession.prototype = {};
UserSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.data = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          if (_i49 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key50 = null;
          var val51 = null;
          key50 = input.readString().value;
          val51 = input.readString().value;
          this.data[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 128:
      if (ftype == Thrift.Type.I64) {
        this.accessTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserSession.prototype.write = function(output) {
  output.writeStructBegin('UserSession');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 3);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.data));
    for (var kiter52 in this.data)
    {
      if (this.data.hasOwnProperty(kiter52))
      {
        var viter53 = this.data[kiter52];
        output.writeString(kiter52);
        output.writeString(viter53);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 5);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.accessTime !== null && this.accessTime !== undefined) {
    output.writeFieldBegin('accessTime', Thrift.Type.I64, 128);
    output.writeI64(this.accessTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientErrorInfo = function(args) {
  this.id = null;
  this.browser = null;
  this.version = null;
  this.message = null;
  this.url = null;
  this.lineNumber = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.lineNumber !== undefined) {
      this.lineNumber = args.lineNumber;
    }
  }
};
ClientErrorInfo.prototype = {};
ClientErrorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.browser = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lineNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientErrorInfo.prototype.write = function(output) {
  output.writeStructBegin('ClientErrorInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRING, 2);
    output.writeString(this.browser);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 5);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.lineNumber !== null && this.lineNumber !== undefined) {
    output.writeFieldBegin('lineNumber', Thrift.Type.I32, 6);
    output.writeI32(this.lineNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Color = function(args) {
  this.r = null;
  this.g = null;
  this.b = null;
  this.a = null;
  if (args) {
    if (args.r !== undefined) {
      this.r = args.r;
    }
    if (args.g !== undefined) {
      this.g = args.g;
    }
    if (args.b !== undefined) {
      this.b = args.b;
    }
    if (args.a !== undefined) {
      this.a = args.a;
    }
  }
};
Color.prototype = {};
Color.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.r = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.g = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.b = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.a = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Color.prototype.write = function(output) {
  output.writeStructBegin('Color');
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.I16, 1);
    output.writeI16(this.r);
    output.writeFieldEnd();
  }
  if (this.g !== null && this.g !== undefined) {
    output.writeFieldBegin('g', Thrift.Type.I16, 2);
    output.writeI16(this.g);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I16, 3);
    output.writeI16(this.b);
    output.writeFieldEnd();
  }
  if (this.a !== null && this.a !== undefined) {
    output.writeFieldBegin('a', Thrift.Type.I16, 4);
    output.writeI16(this.a);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Music = function(args) {
  this.id = null;
  this.name = null;
  this.format = null;
  this.data = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
Music.prototype = {};
Music.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Music.prototype.write = function(output) {
  output.writeStructBegin('Music');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 3);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 100);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Image = function(args) {
  this.id = null;
  this.name = null;
  this.format = null;
  this.data = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
Image.prototype = {};
Image.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Image.prototype.write = function(output) {
  output.writeStructBegin('Image');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 3);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 100);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Polygon = function(args) {
  this.id = null;
  this.vertices = null;
  this.lineColor = null;
  this.fillColor = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.vertices !== undefined) {
      this.vertices = args.vertices;
    }
    if (args.lineColor !== undefined) {
      this.lineColor = args.lineColor;
    }
    if (args.fillColor !== undefined) {
      this.fillColor = args.fillColor;
    }
  }
};
Polygon.prototype = {};
Polygon.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.vertices = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new Point();
          elem60.read(input);
          this.vertices.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRUCT) {
        this.lineColor = new Color();
        this.lineColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.STRUCT) {
        this.fillColor = new Color();
        this.fillColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Polygon.prototype.write = function(output) {
  output.writeStructBegin('Polygon');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.vertices !== null && this.vertices !== undefined) {
    output.writeFieldBegin('vertices', Thrift.Type.LIST, 100);
    output.writeListBegin(Thrift.Type.STRUCT, this.vertices.length);
    for (var iter61 in this.vertices)
    {
      if (this.vertices.hasOwnProperty(iter61))
      {
        iter61 = this.vertices[iter61];
        iter61.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lineColor !== null && this.lineColor !== undefined) {
    output.writeFieldBegin('lineColor', Thrift.Type.STRUCT, 101);
    this.lineColor.write(output);
    output.writeFieldEnd();
  }
  if (this.fillColor !== null && this.fillColor !== undefined) {
    output.writeFieldBegin('fillColor', Thrift.Type.STRUCT, 102);
    this.fillColor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Keyframe = function(args) {
  this.frameTime = null;
  this.imageId = null;
  this.polygonId = null;
  this.rotation = null;
  this.scale = null;
  this.translation = null;
  this.opacity = null;
  if (args) {
    if (args.frameTime !== undefined) {
      this.frameTime = args.frameTime;
    }
    if (args.imageId !== undefined) {
      this.imageId = args.imageId;
    }
    if (args.polygonId !== undefined) {
      this.polygonId = args.polygonId;
    }
    if (args.rotation !== undefined) {
      this.rotation = args.rotation;
    }
    if (args.scale !== undefined) {
      this.scale = args.scale;
    }
    if (args.translation !== undefined) {
      this.translation = args.translation;
    }
    if (args.opacity !== undefined) {
      this.opacity = args.opacity;
    }
  }
};
Keyframe.prototype = {};
Keyframe.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.frameTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.polygonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rotation = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRUCT) {
        this.scale = new Point();
        this.scale.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.STRUCT) {
        this.translation = new Point();
        this.translation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 103:
      if (ftype == Thrift.Type.DOUBLE) {
        this.opacity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Keyframe.prototype.write = function(output) {
  output.writeStructBegin('Keyframe');
  if (this.frameTime !== null && this.frameTime !== undefined) {
    output.writeFieldBegin('frameTime', Thrift.Type.I64, 1);
    output.writeI64(this.frameTime);
    output.writeFieldEnd();
  }
  if (this.imageId !== null && this.imageId !== undefined) {
    output.writeFieldBegin('imageId', Thrift.Type.STRING, 2);
    output.writeString(this.imageId);
    output.writeFieldEnd();
  }
  if (this.polygonId !== null && this.polygonId !== undefined) {
    output.writeFieldBegin('polygonId', Thrift.Type.STRING, 3);
    output.writeString(this.polygonId);
    output.writeFieldEnd();
  }
  if (this.rotation !== null && this.rotation !== undefined) {
    output.writeFieldBegin('rotation', Thrift.Type.DOUBLE, 100);
    output.writeDouble(this.rotation);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.STRUCT, 101);
    this.scale.write(output);
    output.writeFieldEnd();
  }
  if (this.translation !== null && this.translation !== undefined) {
    output.writeFieldBegin('translation', Thrift.Type.STRUCT, 102);
    this.translation.write(output);
    output.writeFieldEnd();
  }
  if (this.opacity !== null && this.opacity !== undefined) {
    output.writeFieldBegin('opacity', Thrift.Type.DOUBLE, 103);
    output.writeDouble(this.opacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Renderable = function(args) {
  this.fabricJson = null;
  this.keyFrame = null;
  this.easeAfter = 0;
  if (args) {
    if (args.fabricJson !== undefined) {
      this.fabricJson = args.fabricJson;
    }
    if (args.keyFrame !== undefined) {
      this.keyFrame = args.keyFrame;
    }
    if (args.easeAfter !== undefined) {
      this.easeAfter = args.easeAfter;
    }
  }
};
Renderable.prototype = {};
Renderable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 100:
      if (ftype == Thrift.Type.STRING) {
        this.fabricJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.I32) {
        this.keyFrame = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 103:
      if (ftype == Thrift.Type.I32) {
        this.easeAfter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Renderable.prototype.write = function(output) {
  output.writeStructBegin('Renderable');
  if (this.fabricJson !== null && this.fabricJson !== undefined) {
    output.writeFieldBegin('fabricJson', Thrift.Type.STRING, 100);
    output.writeString(this.fabricJson);
    output.writeFieldEnd();
  }
  if (this.keyFrame !== null && this.keyFrame !== undefined) {
    output.writeFieldBegin('keyFrame', Thrift.Type.I32, 102);
    output.writeI32(this.keyFrame);
    output.writeFieldEnd();
  }
  if (this.easeAfter !== null && this.easeAfter !== undefined) {
    output.writeFieldBegin('easeAfter', Thrift.Type.I32, 103);
    output.writeI32(this.easeAfter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actor = function(args) {
  this.id = null;
  this.keyFrameRenderables = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.keyFrameRenderables !== undefined) {
      this.keyFrameRenderables = args.keyFrameRenderables;
    }
  }
};
Actor.prototype = {};
Actor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.keyFrameRenderables = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new Renderable();
          elem68.read(input);
          this.keyFrameRenderables.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actor.prototype.write = function(output) {
  output.writeStructBegin('Actor');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.keyFrameRenderables !== null && this.keyFrameRenderables !== undefined) {
    output.writeFieldBegin('keyFrameRenderables', Thrift.Type.LIST, 100);
    output.writeListBegin(Thrift.Type.STRUCT, this.keyFrameRenderables.length);
    for (var iter69 in this.keyFrameRenderables)
    {
      if (this.keyFrameRenderables.hasOwnProperty(iter69))
      {
        iter69 = this.keyFrameRenderables[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Layer = function(args) {
  this.id = null;
  this.visible = true;
  this.locked = false;
  this.actors = [];
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.visible !== undefined) {
      this.visible = args.visible;
    }
    if (args.locked !== undefined) {
      this.locked = args.locked;
    }
    if (args.actors !== undefined) {
      this.actors = args.actors;
    }
  }
};
Layer.prototype = {};
Layer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.locked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.actors = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new Actor();
          elem76.read(input);
          this.actors.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Layer.prototype.write = function(output) {
  output.writeStructBegin('Layer');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 2);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  if (this.locked !== null && this.locked !== undefined) {
    output.writeFieldBegin('locked', Thrift.Type.BOOL, 3);
    output.writeBool(this.locked);
    output.writeFieldEnd();
  }
  if (this.actors !== null && this.actors !== undefined) {
    output.writeFieldBegin('actors', Thrift.Type.LIST, 100);
    output.writeListBegin(Thrift.Type.STRUCT, this.actors.length);
    for (var iter77 in this.actors)
    {
      if (this.actors.hasOwnProperty(iter77))
      {
        iter77 = this.actors[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Movie = function(args) {
  this.id = null;
  this.name = null;
  this.creatorId = null;
  this.composerIds = [];
  this.accessIds = [];
  this.musicId = null;
  this.layers = [];
  this.frameMs = 100;
  this.size = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.creatorId !== undefined) {
      this.creatorId = args.creatorId;
    }
    if (args.composerIds !== undefined) {
      this.composerIds = args.composerIds;
    }
    if (args.accessIds !== undefined) {
      this.accessIds = args.accessIds;
    }
    if (args.musicId !== undefined) {
      this.musicId = args.musicId;
    }
    if (args.layers !== undefined) {
      this.layers = args.layers;
    }
    if (args.frameMs !== undefined) {
      this.frameMs = args.frameMs;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
Movie.prototype = {};
Movie.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size78 = 0;
        var _rtmp382;
        this.composerIds = [];
        var _etype81 = 0;
        _rtmp382 = input.readSetBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = input.readString().value;
          this.composerIds.push(elem84);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size85 = 0;
        var _rtmp389;
        this.accessIds = [];
        var _etype88 = 0;
        _rtmp389 = input.readSetBegin();
        _etype88 = _rtmp389.etype;
        _size85 = _rtmp389.size;
        for (var _i90 = 0; _i90 < _size85; ++_i90)
        {
          var elem91 = null;
          elem91 = input.readString().value;
          this.accessIds.push(elem91);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.musicId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.layers = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new Layer();
          elem98.read(input);
          this.layers.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.I32) {
        this.frameMs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.STRUCT) {
        this.size = new Point();
        this.size.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Movie.prototype.write = function(output) {
  output.writeStructBegin('Movie');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 3);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.composerIds !== null && this.composerIds !== undefined) {
    output.writeFieldBegin('composerIds', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.composerIds.length);
    for (var iter99 in this.composerIds)
    {
      if (this.composerIds.hasOwnProperty(iter99))
      {
        iter99 = this.composerIds[iter99];
        output.writeString(iter99);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.accessIds !== null && this.accessIds !== undefined) {
    output.writeFieldBegin('accessIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.accessIds.length);
    for (var iter100 in this.accessIds)
    {
      if (this.accessIds.hasOwnProperty(iter100))
      {
        iter100 = this.accessIds[iter100];
        output.writeString(iter100);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.musicId !== null && this.musicId !== undefined) {
    output.writeFieldBegin('musicId', Thrift.Type.STRING, 6);
    output.writeString(this.musicId);
    output.writeFieldEnd();
  }
  if (this.layers !== null && this.layers !== undefined) {
    output.writeFieldBegin('layers', Thrift.Type.LIST, 100);
    output.writeListBegin(Thrift.Type.STRUCT, this.layers.length);
    for (var iter101 in this.layers)
    {
      if (this.layers.hasOwnProperty(iter101))
      {
        iter101 = this.layers[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.frameMs !== null && this.frameMs !== undefined) {
    output.writeFieldBegin('frameMs', Thrift.Type.I32, 101);
    output.writeI32(this.frameMs);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.STRUCT, 102);
    this.size.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VERSION = 1;
