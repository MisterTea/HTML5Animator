/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserData implements org.apache.thrift.TBase<UserData, UserData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_VISITED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastVisited", org.apache.thrift.protocol.TType.MAP, (short)128);
  private static final org.apache.thrift.protocol.TField BOOKMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("bookmarks", org.apache.thrift.protocol.TType.MAP, (short)129);
  private static final org.apache.thrift.protocol.TField FAVORITE_COMICS_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteComics", org.apache.thrift.protocol.TType.SET, (short)130);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserDataTupleSchemeFactory());
  }

  public String id; // required
  public Map<String,String> lastVisited; // required
  public Map<String,Set<String>> bookmarks; // required
  public Set<String> favoriteComics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LAST_VISITED((short)128, "lastVisited"),
    BOOKMARKS((short)129, "bookmarks"),
    FAVORITE_COMICS((short)130, "favoriteComics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 128: // LAST_VISITED
          return LAST_VISITED;
        case 129: // BOOKMARKS
          return BOOKMARKS;
        case 130: // FAVORITE_COMICS
          return FAVORITE_COMICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_VISITED, new org.apache.thrift.meta_data.FieldMetaData("lastVisited", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BOOKMARKS, new org.apache.thrift.meta_data.FieldMetaData("bookmarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.FAVORITE_COMICS, new org.apache.thrift.meta_data.FieldMetaData("favoriteComics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserData.class, metaDataMap);
  }

  public UserData() {
    this.id = "";

    this.lastVisited = new HashMap<String,String>();

    this.bookmarks = new HashMap<String,Set<String>>();

    this.favoriteComics = new HashSet<String>();

  }

  public UserData(
    String id,
    Map<String,String> lastVisited,
    Map<String,Set<String>> bookmarks,
    Set<String> favoriteComics)
  {
    this();
    this.id = id;
    this.lastVisited = lastVisited;
    this.bookmarks = bookmarks;
    this.favoriteComics = favoriteComics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserData(UserData other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLastVisited()) {
      Map<String,String> __this__lastVisited = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.lastVisited.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__lastVisited_copy_key = other_element_key;

        String __this__lastVisited_copy_value = other_element_value;

        __this__lastVisited.put(__this__lastVisited_copy_key, __this__lastVisited_copy_value);
      }
      this.lastVisited = __this__lastVisited;
    }
    if (other.isSetBookmarks()) {
      Map<String,Set<String>> __this__bookmarks = new HashMap<String,Set<String>>();
      for (Map.Entry<String, Set<String>> other_element : other.bookmarks.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__bookmarks_copy_key = other_element_key;

        Set<String> __this__bookmarks_copy_value = new HashSet<String>();
        for (String other_element_value_element : other_element_value) {
          __this__bookmarks_copy_value.add(other_element_value_element);
        }

        __this__bookmarks.put(__this__bookmarks_copy_key, __this__bookmarks_copy_value);
      }
      this.bookmarks = __this__bookmarks;
    }
    if (other.isSetFavoriteComics()) {
      Set<String> __this__favoriteComics = new HashSet<String>();
      for (String other_element : other.favoriteComics) {
        __this__favoriteComics.add(other_element);
      }
      this.favoriteComics = __this__favoriteComics;
    }
  }

  public UserData deepCopy() {
    return new UserData(this);
  }

  @Override
  public void clear() {
    this.id = "";

    this.lastVisited = new HashMap<String,String>();

    this.bookmarks = new HashMap<String,Set<String>>();

    this.favoriteComics = new HashSet<String>();

  }

  public String getId() {
    return this.id;
  }

  public UserData setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getLastVisitedSize() {
    return (this.lastVisited == null) ? 0 : this.lastVisited.size();
  }

  public void putToLastVisited(String key, String val) {
    if (this.lastVisited == null) {
      this.lastVisited = new HashMap<String,String>();
    }
    this.lastVisited.put(key, val);
  }

  public Map<String,String> getLastVisited() {
    return this.lastVisited;
  }

  public UserData setLastVisited(Map<String,String> lastVisited) {
    this.lastVisited = lastVisited;
    return this;
  }

  public void unsetLastVisited() {
    this.lastVisited = null;
  }

  /** Returns true if field lastVisited is set (has been assigned a value) and false otherwise */
  public boolean isSetLastVisited() {
    return this.lastVisited != null;
  }

  public void setLastVisitedIsSet(boolean value) {
    if (!value) {
      this.lastVisited = null;
    }
  }

  public int getBookmarksSize() {
    return (this.bookmarks == null) ? 0 : this.bookmarks.size();
  }

  public void putToBookmarks(String key, Set<String> val) {
    if (this.bookmarks == null) {
      this.bookmarks = new HashMap<String,Set<String>>();
    }
    this.bookmarks.put(key, val);
  }

  public Map<String,Set<String>> getBookmarks() {
    return this.bookmarks;
  }

  public UserData setBookmarks(Map<String,Set<String>> bookmarks) {
    this.bookmarks = bookmarks;
    return this;
  }

  public void unsetBookmarks() {
    this.bookmarks = null;
  }

  /** Returns true if field bookmarks is set (has been assigned a value) and false otherwise */
  public boolean isSetBookmarks() {
    return this.bookmarks != null;
  }

  public void setBookmarksIsSet(boolean value) {
    if (!value) {
      this.bookmarks = null;
    }
  }

  public int getFavoriteComicsSize() {
    return (this.favoriteComics == null) ? 0 : this.favoriteComics.size();
  }

  public java.util.Iterator<String> getFavoriteComicsIterator() {
    return (this.favoriteComics == null) ? null : this.favoriteComics.iterator();
  }

  public void addToFavoriteComics(String elem) {
    if (this.favoriteComics == null) {
      this.favoriteComics = new HashSet<String>();
    }
    this.favoriteComics.add(elem);
  }

  public Set<String> getFavoriteComics() {
    return this.favoriteComics;
  }

  public UserData setFavoriteComics(Set<String> favoriteComics) {
    this.favoriteComics = favoriteComics;
    return this;
  }

  public void unsetFavoriteComics() {
    this.favoriteComics = null;
  }

  /** Returns true if field favoriteComics is set (has been assigned a value) and false otherwise */
  public boolean isSetFavoriteComics() {
    return this.favoriteComics != null;
  }

  public void setFavoriteComicsIsSet(boolean value) {
    if (!value) {
      this.favoriteComics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LAST_VISITED:
      if (value == null) {
        unsetLastVisited();
      } else {
        setLastVisited((Map<String,String>)value);
      }
      break;

    case BOOKMARKS:
      if (value == null) {
        unsetBookmarks();
      } else {
        setBookmarks((Map<String,Set<String>>)value);
      }
      break;

    case FAVORITE_COMICS:
      if (value == null) {
        unsetFavoriteComics();
      } else {
        setFavoriteComics((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LAST_VISITED:
      return getLastVisited();

    case BOOKMARKS:
      return getBookmarks();

    case FAVORITE_COMICS:
      return getFavoriteComics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LAST_VISITED:
      return isSetLastVisited();
    case BOOKMARKS:
      return isSetBookmarks();
    case FAVORITE_COMICS:
      return isSetFavoriteComics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserData)
      return this.equals((UserData)that);
    return false;
  }

  public boolean equals(UserData that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_lastVisited = true && this.isSetLastVisited();
    boolean that_present_lastVisited = true && that.isSetLastVisited();
    if (this_present_lastVisited || that_present_lastVisited) {
      if (!(this_present_lastVisited && that_present_lastVisited))
        return false;
      if (!this.lastVisited.equals(that.lastVisited))
        return false;
    }

    boolean this_present_bookmarks = true && this.isSetBookmarks();
    boolean that_present_bookmarks = true && that.isSetBookmarks();
    if (this_present_bookmarks || that_present_bookmarks) {
      if (!(this_present_bookmarks && that_present_bookmarks))
        return false;
      if (!this.bookmarks.equals(that.bookmarks))
        return false;
    }

    boolean this_present_favoriteComics = true && this.isSetFavoriteComics();
    boolean that_present_favoriteComics = true && that.isSetFavoriteComics();
    if (this_present_favoriteComics || that_present_favoriteComics) {
      if (!(this_present_favoriteComics && that_present_favoriteComics))
        return false;
      if (!this.favoriteComics.equals(that.favoriteComics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserData typedOther = (UserData)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastVisited()).compareTo(typedOther.isSetLastVisited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastVisited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastVisited, typedOther.lastVisited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookmarks()).compareTo(typedOther.isSetBookmarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookmarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookmarks, typedOther.bookmarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavoriteComics()).compareTo(typedOther.isSetFavoriteComics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavoriteComics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteComics, typedOther.favoriteComics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserData(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastVisited:");
    if (this.lastVisited == null) {
      sb.append("null");
    } else {
      sb.append(this.lastVisited);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookmarks:");
    if (this.bookmarks == null) {
      sb.append("null");
    } else {
      sb.append(this.bookmarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favoriteComics:");
    if (this.favoriteComics == null) {
      sb.append("null");
    } else {
      sb.append(this.favoriteComics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDataStandardSchemeFactory implements SchemeFactory {
    public UserDataStandardScheme getScheme() {
      return new UserDataStandardScheme();
    }
  }

  private static class UserDataStandardScheme extends StandardScheme<UserData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 128: // LAST_VISITED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.lastVisited = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.lastVisited.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setLastVisitedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 129: // BOOKMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.bookmarks = new HashMap<String,Set<String>>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6; // required
                  Set<String> _val7; // required
                  _key6 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                    _val7 = new HashSet<String>(2*_set8.size);
                    for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                    {
                      String _elem10; // optional
                      _elem10 = iprot.readString();
                      _val7.add(_elem10);
                    }
                    iprot.readSetEnd();
                  }
                  struct.bookmarks.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setBookmarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 130: // FAVORITE_COMICS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set11 = iprot.readSetBegin();
                struct.favoriteComics = new HashSet<String>(2*_set11.size);
                for (int _i12 = 0; _i12 < _set11.size; ++_i12)
                {
                  String _elem13; // optional
                  _elem13 = iprot.readString();
                  struct.favoriteComics.add(_elem13);
                }
                iprot.readSetEnd();
              }
              struct.setFavoriteComicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.lastVisited != null) {
        oprot.writeFieldBegin(LAST_VISITED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.lastVisited.size()));
          for (Map.Entry<String, String> _iter14 : struct.lastVisited.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bookmarks != null) {
        oprot.writeFieldBegin(BOOKMARKS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.bookmarks.size()));
          for (Map.Entry<String, Set<String>> _iter15 : struct.bookmarks.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter15.getValue().size()));
              for (String _iter16 : _iter15.getValue())
              {
                oprot.writeString(_iter16);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.favoriteComics != null) {
        oprot.writeFieldBegin(FAVORITE_COMICS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.favoriteComics.size()));
          for (String _iter17 : struct.favoriteComics)
          {
            oprot.writeString(_iter17);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDataTupleSchemeFactory implements SchemeFactory {
    public UserDataTupleScheme getScheme() {
      return new UserDataTupleScheme();
    }
  }

  private static class UserDataTupleScheme extends TupleScheme<UserData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLastVisited()) {
        optionals.set(1);
      }
      if (struct.isSetBookmarks()) {
        optionals.set(2);
      }
      if (struct.isSetFavoriteComics()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLastVisited()) {
        {
          oprot.writeI32(struct.lastVisited.size());
          for (Map.Entry<String, String> _iter18 : struct.lastVisited.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
        }
      }
      if (struct.isSetBookmarks()) {
        {
          oprot.writeI32(struct.bookmarks.size());
          for (Map.Entry<String, Set<String>> _iter19 : struct.bookmarks.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            {
              oprot.writeI32(_iter19.getValue().size());
              for (String _iter20 : _iter19.getValue())
              {
                oprot.writeString(_iter20);
              }
            }
          }
        }
      }
      if (struct.isSetFavoriteComics()) {
        {
          oprot.writeI32(struct.favoriteComics.size());
          for (String _iter21 : struct.favoriteComics)
          {
            oprot.writeString(_iter21);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lastVisited = new HashMap<String,String>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            String _key24; // required
            String _val25; // required
            _key24 = iprot.readString();
            _val25 = iprot.readString();
            struct.lastVisited.put(_key24, _val25);
          }
        }
        struct.setLastVisitedIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
          struct.bookmarks = new HashMap<String,Set<String>>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28; // required
            Set<String> _val29; // required
            _key28 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set30 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val29 = new HashSet<String>(2*_set30.size);
              for (int _i31 = 0; _i31 < _set30.size; ++_i31)
              {
                String _elem32; // optional
                _elem32 = iprot.readString();
                _val29.add(_elem32);
              }
            }
            struct.bookmarks.put(_key28, _val29);
          }
        }
        struct.setBookmarksIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set33 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.favoriteComics = new HashSet<String>(2*_set33.size);
          for (int _i34 = 0; _i34 < _set33.size; ++_i34)
          {
            String _elem35; // optional
            _elem35 = iprot.readString();
            struct.favoriteComics.add(_elem35);
          }
        }
        struct.setFavoriteComicsIsSet(true);
      }
    }
  }

}

