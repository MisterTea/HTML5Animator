/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Layer implements org.apache.thrift.TBase<Layer, Layer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Layer");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("visible", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ACTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("actors", org.apache.thrift.protocol.TType.LIST, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LayerTupleSchemeFactory());
  }

  public String id; // required
  public boolean visible; // required
  public boolean locked; // required
  public List<Actor> actors; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    VISIBLE((short)2, "visible"),
    LOCKED((short)3, "locked"),
    ACTORS((short)100, "actors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // VISIBLE
          return VISIBLE;
        case 3: // LOCKED
          return LOCKED;
        case 100: // ACTORS
          return ACTORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VISIBLE_ISSET_ID = 0;
  private static final int __LOCKED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBLE, new org.apache.thrift.meta_data.FieldMetaData("visible", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACTORS, new org.apache.thrift.meta_data.FieldMetaData("actors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Actor.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Layer.class, metaDataMap);
  }

  public Layer() {
    this.visible = true;

    this.locked = false;

    this.actors = new ArrayList<Actor>();

  }

  public Layer(
    String id,
    boolean visible,
    boolean locked,
    List<Actor> actors)
  {
    this();
    this.id = id;
    this.visible = visible;
    setVisibleIsSet(true);
    this.locked = locked;
    setLockedIsSet(true);
    this.actors = actors;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Layer(Layer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.visible = other.visible;
    this.locked = other.locked;
    if (other.isSetActors()) {
      List<Actor> __this__actors = new ArrayList<Actor>();
      for (Actor other_element : other.actors) {
        __this__actors.add(new Actor(other_element));
      }
      this.actors = __this__actors;
    }
  }

  public Layer deepCopy() {
    return new Layer(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.visible = true;

    this.locked = false;

    this.actors = new ArrayList<Actor>();

  }

  public String getId() {
    return this.id;
  }

  public Layer setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isVisible() {
    return this.visible;
  }

  public Layer setVisible(boolean visible) {
    this.visible = visible;
    setVisibleIsSet(true);
    return this;
  }

  public void unsetVisible() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_ISSET_ID);
  }

  /** Returns true if field visible is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIBLE_ISSET_ID);
  }

  public void setVisibleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIBLE_ISSET_ID, value);
  }

  public boolean isLocked() {
    return this.locked;
  }

  public Layer setLocked(boolean locked) {
    this.locked = locked;
    setLockedIsSet(true);
    return this;
  }

  public void unsetLocked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  public void setLockedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKED_ISSET_ID, value);
  }

  public int getActorsSize() {
    return (this.actors == null) ? 0 : this.actors.size();
  }

  public java.util.Iterator<Actor> getActorsIterator() {
    return (this.actors == null) ? null : this.actors.iterator();
  }

  public void addToActors(Actor elem) {
    if (this.actors == null) {
      this.actors = new ArrayList<Actor>();
    }
    this.actors.add(elem);
  }

  public List<Actor> getActors() {
    return this.actors;
  }

  public Layer setActors(List<Actor> actors) {
    this.actors = actors;
    return this;
  }

  public void unsetActors() {
    this.actors = null;
  }

  /** Returns true if field actors is set (has been assigned a value) and false otherwise */
  public boolean isSetActors() {
    return this.actors != null;
  }

  public void setActorsIsSet(boolean value) {
    if (!value) {
      this.actors = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case VISIBLE:
      if (value == null) {
        unsetVisible();
      } else {
        setVisible((Boolean)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((Boolean)value);
      }
      break;

    case ACTORS:
      if (value == null) {
        unsetActors();
      } else {
        setActors((List<Actor>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case VISIBLE:
      return Boolean.valueOf(isVisible());

    case LOCKED:
      return Boolean.valueOf(isLocked());

    case ACTORS:
      return getActors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case VISIBLE:
      return isSetVisible();
    case LOCKED:
      return isSetLocked();
    case ACTORS:
      return isSetActors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Layer)
      return this.equals((Layer)that);
    return false;
  }

  public boolean equals(Layer that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_visible = true;
    boolean that_present_visible = true;
    if (this_present_visible || that_present_visible) {
      if (!(this_present_visible && that_present_visible))
        return false;
      if (this.visible != that.visible)
        return false;
    }

    boolean this_present_locked = true;
    boolean that_present_locked = true;
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (this.locked != that.locked)
        return false;
    }

    boolean this_present_actors = true && this.isSetActors();
    boolean that_present_actors = true && that.isSetActors();
    if (this_present_actors || that_present_actors) {
      if (!(this_present_actors && that_present_actors))
        return false;
      if (!this.actors.equals(that.actors))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Layer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Layer typedOther = (Layer)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisible()).compareTo(typedOther.isSetVisible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible, typedOther.visible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocked()).compareTo(typedOther.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, typedOther.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActors()).compareTo(typedOther.isSetActors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actors, typedOther.actors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Layer(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visible:");
    sb.append(this.visible);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locked:");
    sb.append(this.locked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actors:");
    if (this.actors == null) {
      sb.append("null");
    } else {
      sb.append(this.actors);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LayerStandardSchemeFactory implements SchemeFactory {
    public LayerStandardScheme getScheme() {
      return new LayerStandardScheme();
    }
  }

  private static class LayerStandardScheme extends StandardScheme<Layer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Layer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VISIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.visible = iprot.readBool();
              struct.setVisibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.locked = iprot.readBool();
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ACTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.actors = new ArrayList<Actor>(_list70.size);
                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                {
                  Actor _elem72; // optional
                  _elem72 = new Actor();
                  _elem72.read(iprot);
                  struct.actors.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setActorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Layer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VISIBLE_FIELD_DESC);
      oprot.writeBool(struct.visible);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKED_FIELD_DESC);
      oprot.writeBool(struct.locked);
      oprot.writeFieldEnd();
      if (struct.actors != null) {
        oprot.writeFieldBegin(ACTORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actors.size()));
          for (Actor _iter73 : struct.actors)
          {
            _iter73.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LayerTupleSchemeFactory implements SchemeFactory {
    public LayerTupleScheme getScheme() {
      return new LayerTupleScheme();
    }
  }

  private static class LayerTupleScheme extends TupleScheme<Layer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Layer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetVisible()) {
        optionals.set(1);
      }
      if (struct.isSetLocked()) {
        optionals.set(2);
      }
      if (struct.isSetActors()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetVisible()) {
        oprot.writeBool(struct.visible);
      }
      if (struct.isSetLocked()) {
        oprot.writeBool(struct.locked);
      }
      if (struct.isSetActors()) {
        {
          oprot.writeI32(struct.actors.size());
          for (Actor _iter74 : struct.actors)
          {
            _iter74.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Layer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.visible = iprot.readBool();
        struct.setVisibleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locked = iprot.readBool();
        struct.setLockedIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actors = new ArrayList<Actor>(_list75.size);
          for (int _i76 = 0; _i76 < _list75.size; ++_i76)
          {
            Actor _elem77; // optional
            _elem77 = new Actor();
            _elem77.read(iprot);
            struct.actors.add(_elem77);
          }
        }
        struct.setActorsIsSet(true);
      }
    }
  }

}

