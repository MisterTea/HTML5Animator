/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Renderable implements org.apache.thrift.TBase<Renderable, Renderable._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Renderable");

  private static final org.apache.thrift.protocol.TField FABRIC_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("fabricJson", org.apache.thrift.protocol.TType.STRING, (short)100);
  private static final org.apache.thrift.protocol.TField KEY_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("keyFrame", org.apache.thrift.protocol.TType.I32, (short)102);
  private static final org.apache.thrift.protocol.TField EASE_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("easeAfter", org.apache.thrift.protocol.TType.I32, (short)103);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RenderableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RenderableTupleSchemeFactory());
  }

  public String fabricJson; // required
  public int keyFrame; // required
  /**
   * 
   * @see Easing
   */
  public Easing easeAfter; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FABRIC_JSON((short)100, "fabricJson"),
    KEY_FRAME((short)102, "keyFrame"),
    /**
     * 
     * @see Easing
     */
    EASE_AFTER((short)103, "easeAfter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 100: // FABRIC_JSON
          return FABRIC_JSON;
        case 102: // KEY_FRAME
          return KEY_FRAME;
        case 103: // EASE_AFTER
          return EASE_AFTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEYFRAME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FABRIC_JSON, new org.apache.thrift.meta_data.FieldMetaData("fabricJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_FRAME, new org.apache.thrift.meta_data.FieldMetaData("keyFrame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EASE_AFTER, new org.apache.thrift.meta_data.FieldMetaData("easeAfter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Easing.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Renderable.class, metaDataMap);
  }

  public Renderable() {
    this.easeAfter = com.github.mistertea.html5animator.thrift.Easing.EASE_IN_LINEAR;

  }

  public Renderable(
    String fabricJson,
    int keyFrame,
    Easing easeAfter)
  {
    this();
    this.fabricJson = fabricJson;
    this.keyFrame = keyFrame;
    setKeyFrameIsSet(true);
    this.easeAfter = easeAfter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Renderable(Renderable other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFabricJson()) {
      this.fabricJson = other.fabricJson;
    }
    this.keyFrame = other.keyFrame;
    if (other.isSetEaseAfter()) {
      this.easeAfter = other.easeAfter;
    }
  }

  public Renderable deepCopy() {
    return new Renderable(this);
  }

  @Override
  public void clear() {
    this.fabricJson = null;
    setKeyFrameIsSet(false);
    this.keyFrame = 0;
    this.easeAfter = com.github.mistertea.html5animator.thrift.Easing.EASE_IN_LINEAR;

  }

  public String getFabricJson() {
    return this.fabricJson;
  }

  public Renderable setFabricJson(String fabricJson) {
    this.fabricJson = fabricJson;
    return this;
  }

  public void unsetFabricJson() {
    this.fabricJson = null;
  }

  /** Returns true if field fabricJson is set (has been assigned a value) and false otherwise */
  public boolean isSetFabricJson() {
    return this.fabricJson != null;
  }

  public void setFabricJsonIsSet(boolean value) {
    if (!value) {
      this.fabricJson = null;
    }
  }

  public int getKeyFrame() {
    return this.keyFrame;
  }

  public Renderable setKeyFrame(int keyFrame) {
    this.keyFrame = keyFrame;
    setKeyFrameIsSet(true);
    return this;
  }

  public void unsetKeyFrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEYFRAME_ISSET_ID);
  }

  /** Returns true if field keyFrame is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyFrame() {
    return EncodingUtils.testBit(__isset_bitfield, __KEYFRAME_ISSET_ID);
  }

  public void setKeyFrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEYFRAME_ISSET_ID, value);
  }

  /**
   * 
   * @see Easing
   */
  public Easing getEaseAfter() {
    return this.easeAfter;
  }

  /**
   * 
   * @see Easing
   */
  public Renderable setEaseAfter(Easing easeAfter) {
    this.easeAfter = easeAfter;
    return this;
  }

  public void unsetEaseAfter() {
    this.easeAfter = null;
  }

  /** Returns true if field easeAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetEaseAfter() {
    return this.easeAfter != null;
  }

  public void setEaseAfterIsSet(boolean value) {
    if (!value) {
      this.easeAfter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FABRIC_JSON:
      if (value == null) {
        unsetFabricJson();
      } else {
        setFabricJson((String)value);
      }
      break;

    case KEY_FRAME:
      if (value == null) {
        unsetKeyFrame();
      } else {
        setKeyFrame((Integer)value);
      }
      break;

    case EASE_AFTER:
      if (value == null) {
        unsetEaseAfter();
      } else {
        setEaseAfter((Easing)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FABRIC_JSON:
      return getFabricJson();

    case KEY_FRAME:
      return Integer.valueOf(getKeyFrame());

    case EASE_AFTER:
      return getEaseAfter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FABRIC_JSON:
      return isSetFabricJson();
    case KEY_FRAME:
      return isSetKeyFrame();
    case EASE_AFTER:
      return isSetEaseAfter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Renderable)
      return this.equals((Renderable)that);
    return false;
  }

  public boolean equals(Renderable that) {
    if (that == null)
      return false;

    boolean this_present_fabricJson = true && this.isSetFabricJson();
    boolean that_present_fabricJson = true && that.isSetFabricJson();
    if (this_present_fabricJson || that_present_fabricJson) {
      if (!(this_present_fabricJson && that_present_fabricJson))
        return false;
      if (!this.fabricJson.equals(that.fabricJson))
        return false;
    }

    boolean this_present_keyFrame = true;
    boolean that_present_keyFrame = true;
    if (this_present_keyFrame || that_present_keyFrame) {
      if (!(this_present_keyFrame && that_present_keyFrame))
        return false;
      if (this.keyFrame != that.keyFrame)
        return false;
    }

    boolean this_present_easeAfter = true && this.isSetEaseAfter();
    boolean that_present_easeAfter = true && that.isSetEaseAfter();
    if (this_present_easeAfter || that_present_easeAfter) {
      if (!(this_present_easeAfter && that_present_easeAfter))
        return false;
      if (!this.easeAfter.equals(that.easeAfter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Renderable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Renderable typedOther = (Renderable)other;

    lastComparison = Boolean.valueOf(isSetFabricJson()).compareTo(typedOther.isSetFabricJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFabricJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fabricJson, typedOther.fabricJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyFrame()).compareTo(typedOther.isSetKeyFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyFrame, typedOther.keyFrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEaseAfter()).compareTo(typedOther.isSetEaseAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEaseAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.easeAfter, typedOther.easeAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Renderable(");
    boolean first = true;

    sb.append("fabricJson:");
    if (this.fabricJson == null) {
      sb.append("null");
    } else {
      sb.append(this.fabricJson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyFrame:");
    sb.append(this.keyFrame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("easeAfter:");
    if (this.easeAfter == null) {
      sb.append("null");
    } else {
      sb.append(this.easeAfter);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RenderableStandardSchemeFactory implements SchemeFactory {
    public RenderableStandardScheme getScheme() {
      return new RenderableStandardScheme();
    }
  }

  private static class RenderableStandardScheme extends StandardScheme<Renderable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Renderable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 100: // FABRIC_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fabricJson = iprot.readString();
              struct.setFabricJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // KEY_FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keyFrame = iprot.readI32();
              struct.setKeyFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // EASE_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.easeAfter = Easing.findByValue(iprot.readI32());
              struct.setEaseAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Renderable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fabricJson != null) {
        oprot.writeFieldBegin(FABRIC_JSON_FIELD_DESC);
        oprot.writeString(struct.fabricJson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FRAME_FIELD_DESC);
      oprot.writeI32(struct.keyFrame);
      oprot.writeFieldEnd();
      if (struct.easeAfter != null) {
        oprot.writeFieldBegin(EASE_AFTER_FIELD_DESC);
        oprot.writeI32(struct.easeAfter.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RenderableTupleSchemeFactory implements SchemeFactory {
    public RenderableTupleScheme getScheme() {
      return new RenderableTupleScheme();
    }
  }

  private static class RenderableTupleScheme extends TupleScheme<Renderable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Renderable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFabricJson()) {
        optionals.set(0);
      }
      if (struct.isSetKeyFrame()) {
        optionals.set(1);
      }
      if (struct.isSetEaseAfter()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFabricJson()) {
        oprot.writeString(struct.fabricJson);
      }
      if (struct.isSetKeyFrame()) {
        oprot.writeI32(struct.keyFrame);
      }
      if (struct.isSetEaseAfter()) {
        oprot.writeI32(struct.easeAfter.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Renderable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fabricJson = iprot.readString();
        struct.setFabricJsonIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyFrame = iprot.readI32();
        struct.setKeyFrameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.easeAfter = Easing.findByValue(iprot.readI32());
        struct.setEaseAfterIsSet(true);
      }
    }
  }

}

