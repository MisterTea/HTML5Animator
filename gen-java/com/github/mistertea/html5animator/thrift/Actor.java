/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Actor implements org.apache.thrift.TBase<Actor, Actor._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Actor");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FRAME_RENDERABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("keyFrameRenderables", org.apache.thrift.protocol.TType.LIST, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActorTupleSchemeFactory());
  }

  public String id; // required
  public List<Renderable> keyFrameRenderables; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    KEY_FRAME_RENDERABLES((short)100, "keyFrameRenderables");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 100: // KEY_FRAME_RENDERABLES
          return KEY_FRAME_RENDERABLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_FRAME_RENDERABLES, new org.apache.thrift.meta_data.FieldMetaData("keyFrameRenderables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Renderable.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Actor.class, metaDataMap);
  }

  public Actor() {
    this.keyFrameRenderables = new ArrayList<Renderable>();

  }

  public Actor(
    String id,
    List<Renderable> keyFrameRenderables)
  {
    this();
    this.id = id;
    this.keyFrameRenderables = keyFrameRenderables;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Actor(Actor other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetKeyFrameRenderables()) {
      List<Renderable> __this__keyFrameRenderables = new ArrayList<Renderable>();
      for (Renderable other_element : other.keyFrameRenderables) {
        __this__keyFrameRenderables.add(new Renderable(other_element));
      }
      this.keyFrameRenderables = __this__keyFrameRenderables;
    }
  }

  public Actor deepCopy() {
    return new Actor(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.keyFrameRenderables = new ArrayList<Renderable>();

  }

  public String getId() {
    return this.id;
  }

  public Actor setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getKeyFrameRenderablesSize() {
    return (this.keyFrameRenderables == null) ? 0 : this.keyFrameRenderables.size();
  }

  public java.util.Iterator<Renderable> getKeyFrameRenderablesIterator() {
    return (this.keyFrameRenderables == null) ? null : this.keyFrameRenderables.iterator();
  }

  public void addToKeyFrameRenderables(Renderable elem) {
    if (this.keyFrameRenderables == null) {
      this.keyFrameRenderables = new ArrayList<Renderable>();
    }
    this.keyFrameRenderables.add(elem);
  }

  public List<Renderable> getKeyFrameRenderables() {
    return this.keyFrameRenderables;
  }

  public Actor setKeyFrameRenderables(List<Renderable> keyFrameRenderables) {
    this.keyFrameRenderables = keyFrameRenderables;
    return this;
  }

  public void unsetKeyFrameRenderables() {
    this.keyFrameRenderables = null;
  }

  /** Returns true if field keyFrameRenderables is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyFrameRenderables() {
    return this.keyFrameRenderables != null;
  }

  public void setKeyFrameRenderablesIsSet(boolean value) {
    if (!value) {
      this.keyFrameRenderables = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case KEY_FRAME_RENDERABLES:
      if (value == null) {
        unsetKeyFrameRenderables();
      } else {
        setKeyFrameRenderables((List<Renderable>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case KEY_FRAME_RENDERABLES:
      return getKeyFrameRenderables();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case KEY_FRAME_RENDERABLES:
      return isSetKeyFrameRenderables();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Actor)
      return this.equals((Actor)that);
    return false;
  }

  public boolean equals(Actor that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_keyFrameRenderables = true && this.isSetKeyFrameRenderables();
    boolean that_present_keyFrameRenderables = true && that.isSetKeyFrameRenderables();
    if (this_present_keyFrameRenderables || that_present_keyFrameRenderables) {
      if (!(this_present_keyFrameRenderables && that_present_keyFrameRenderables))
        return false;
      if (!this.keyFrameRenderables.equals(that.keyFrameRenderables))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Actor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Actor typedOther = (Actor)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyFrameRenderables()).compareTo(typedOther.isSetKeyFrameRenderables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyFrameRenderables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyFrameRenderables, typedOther.keyFrameRenderables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Actor(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyFrameRenderables:");
    if (this.keyFrameRenderables == null) {
      sb.append("null");
    } else {
      sb.append(this.keyFrameRenderables);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActorStandardSchemeFactory implements SchemeFactory {
    public ActorStandardScheme getScheme() {
      return new ActorStandardScheme();
    }
  }

  private static class ActorStandardScheme extends StandardScheme<Actor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Actor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // KEY_FRAME_RENDERABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.keyFrameRenderables = new ArrayList<Renderable>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  Renderable _elem64; // optional
                  _elem64 = new Renderable();
                  _elem64.read(iprot);
                  struct.keyFrameRenderables.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setKeyFrameRenderablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Actor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.keyFrameRenderables != null) {
        oprot.writeFieldBegin(KEY_FRAME_RENDERABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keyFrameRenderables.size()));
          for (Renderable _iter65 : struct.keyFrameRenderables)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActorTupleSchemeFactory implements SchemeFactory {
    public ActorTupleScheme getScheme() {
      return new ActorTupleScheme();
    }
  }

  private static class ActorTupleScheme extends TupleScheme<Actor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Actor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetKeyFrameRenderables()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetKeyFrameRenderables()) {
        {
          oprot.writeI32(struct.keyFrameRenderables.size());
          for (Renderable _iter66 : struct.keyFrameRenderables)
          {
            _iter66.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Actor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.keyFrameRenderables = new ArrayList<Renderable>(_list67.size);
          for (int _i68 = 0; _i68 < _list67.size; ++_i68)
          {
            Renderable _elem69; // optional
            _elem69 = new Renderable();
            _elem69.read(iprot);
            struct.keyFrameRenderables.add(_elem69);
          }
        }
        struct.setKeyFrameRenderablesIsSet(true);
      }
    }
  }

}

