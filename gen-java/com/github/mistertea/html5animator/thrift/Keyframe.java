/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Keyframe implements org.apache.thrift.TBase<Keyframe, Keyframe._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Keyframe");

  private static final org.apache.thrift.protocol.TField FRAME_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("frameTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POLYGON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("polygonId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("rotation", org.apache.thrift.protocol.TType.DOUBLE, (short)100);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField TRANSLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("translation", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField OPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("opacity", org.apache.thrift.protocol.TType.DOUBLE, (short)103);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KeyframeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KeyframeTupleSchemeFactory());
  }

  public long frameTime; // required
  public String imageId; // required
  public String polygonId; // required
  public double rotation; // required
  public Point scale; // required
  public Point translation; // required
  public double opacity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAME_TIME((short)1, "frameTime"),
    IMAGE_ID((short)2, "imageId"),
    POLYGON_ID((short)3, "polygonId"),
    ROTATION((short)100, "rotation"),
    SCALE((short)101, "scale"),
    TRANSLATION((short)102, "translation"),
    OPACITY((short)103, "opacity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAME_TIME
          return FRAME_TIME;
        case 2: // IMAGE_ID
          return IMAGE_ID;
        case 3: // POLYGON_ID
          return POLYGON_ID;
        case 100: // ROTATION
          return ROTATION;
        case 101: // SCALE
          return SCALE;
        case 102: // TRANSLATION
          return TRANSLATION;
        case 103: // OPACITY
          return OPACITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAMETIME_ISSET_ID = 0;
  private static final int __ROTATION_ISSET_ID = 1;
  private static final int __OPACITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAME_TIME, new org.apache.thrift.meta_data.FieldMetaData("frameTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("imageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLYGON_ID, new org.apache.thrift.meta_data.FieldMetaData("polygonId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROTATION, new org.apache.thrift.meta_data.FieldMetaData("rotation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.TRANSLATION, new org.apache.thrift.meta_data.FieldMetaData("translation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    tmpMap.put(_Fields.OPACITY, new org.apache.thrift.meta_data.FieldMetaData("opacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Keyframe.class, metaDataMap);
  }

  public Keyframe() {
  }

  public Keyframe(
    long frameTime,
    String imageId,
    String polygonId,
    double rotation,
    Point scale,
    Point translation,
    double opacity)
  {
    this();
    this.frameTime = frameTime;
    setFrameTimeIsSet(true);
    this.imageId = imageId;
    this.polygonId = polygonId;
    this.rotation = rotation;
    setRotationIsSet(true);
    this.scale = scale;
    this.translation = translation;
    this.opacity = opacity;
    setOpacityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Keyframe(Keyframe other) {
    __isset_bitfield = other.__isset_bitfield;
    this.frameTime = other.frameTime;
    if (other.isSetImageId()) {
      this.imageId = other.imageId;
    }
    if (other.isSetPolygonId()) {
      this.polygonId = other.polygonId;
    }
    this.rotation = other.rotation;
    if (other.isSetScale()) {
      this.scale = new Point(other.scale);
    }
    if (other.isSetTranslation()) {
      this.translation = new Point(other.translation);
    }
    this.opacity = other.opacity;
  }

  public Keyframe deepCopy() {
    return new Keyframe(this);
  }

  @Override
  public void clear() {
    setFrameTimeIsSet(false);
    this.frameTime = 0;
    this.imageId = null;
    this.polygonId = null;
    setRotationIsSet(false);
    this.rotation = 0.0;
    this.scale = null;
    this.translation = null;
    setOpacityIsSet(false);
    this.opacity = 0.0;
  }

  public long getFrameTime() {
    return this.frameTime;
  }

  public Keyframe setFrameTime(long frameTime) {
    this.frameTime = frameTime;
    setFrameTimeIsSet(true);
    return this;
  }

  public void unsetFrameTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMETIME_ISSET_ID);
  }

  /** Returns true if field frameTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMETIME_ISSET_ID);
  }

  public void setFrameTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMETIME_ISSET_ID, value);
  }

  public String getImageId() {
    return this.imageId;
  }

  public Keyframe setImageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  public void unsetImageId() {
    this.imageId = null;
  }

  /** Returns true if field imageId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageId() {
    return this.imageId != null;
  }

  public void setImageIdIsSet(boolean value) {
    if (!value) {
      this.imageId = null;
    }
  }

  public String getPolygonId() {
    return this.polygonId;
  }

  public Keyframe setPolygonId(String polygonId) {
    this.polygonId = polygonId;
    return this;
  }

  public void unsetPolygonId() {
    this.polygonId = null;
  }

  /** Returns true if field polygonId is set (has been assigned a value) and false otherwise */
  public boolean isSetPolygonId() {
    return this.polygonId != null;
  }

  public void setPolygonIdIsSet(boolean value) {
    if (!value) {
      this.polygonId = null;
    }
  }

  public double getRotation() {
    return this.rotation;
  }

  public Keyframe setRotation(double rotation) {
    this.rotation = rotation;
    setRotationIsSet(true);
    return this;
  }

  public void unsetRotation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROTATION_ISSET_ID);
  }

  /** Returns true if field rotation is set (has been assigned a value) and false otherwise */
  public boolean isSetRotation() {
    return EncodingUtils.testBit(__isset_bitfield, __ROTATION_ISSET_ID);
  }

  public void setRotationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROTATION_ISSET_ID, value);
  }

  public Point getScale() {
    return this.scale;
  }

  public Keyframe setScale(Point scale) {
    this.scale = scale;
    return this;
  }

  public void unsetScale() {
    this.scale = null;
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return this.scale != null;
  }

  public void setScaleIsSet(boolean value) {
    if (!value) {
      this.scale = null;
    }
  }

  public Point getTranslation() {
    return this.translation;
  }

  public Keyframe setTranslation(Point translation) {
    this.translation = translation;
    return this;
  }

  public void unsetTranslation() {
    this.translation = null;
  }

  /** Returns true if field translation is set (has been assigned a value) and false otherwise */
  public boolean isSetTranslation() {
    return this.translation != null;
  }

  public void setTranslationIsSet(boolean value) {
    if (!value) {
      this.translation = null;
    }
  }

  public double getOpacity() {
    return this.opacity;
  }

  public Keyframe setOpacity(double opacity) {
    this.opacity = opacity;
    setOpacityIsSet(true);
    return this;
  }

  public void unsetOpacity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPACITY_ISSET_ID);
  }

  /** Returns true if field opacity is set (has been assigned a value) and false otherwise */
  public boolean isSetOpacity() {
    return EncodingUtils.testBit(__isset_bitfield, __OPACITY_ISSET_ID);
  }

  public void setOpacityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPACITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAME_TIME:
      if (value == null) {
        unsetFrameTime();
      } else {
        setFrameTime((Long)value);
      }
      break;

    case IMAGE_ID:
      if (value == null) {
        unsetImageId();
      } else {
        setImageId((String)value);
      }
      break;

    case POLYGON_ID:
      if (value == null) {
        unsetPolygonId();
      } else {
        setPolygonId((String)value);
      }
      break;

    case ROTATION:
      if (value == null) {
        unsetRotation();
      } else {
        setRotation((Double)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((Point)value);
      }
      break;

    case TRANSLATION:
      if (value == null) {
        unsetTranslation();
      } else {
        setTranslation((Point)value);
      }
      break;

    case OPACITY:
      if (value == null) {
        unsetOpacity();
      } else {
        setOpacity((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAME_TIME:
      return Long.valueOf(getFrameTime());

    case IMAGE_ID:
      return getImageId();

    case POLYGON_ID:
      return getPolygonId();

    case ROTATION:
      return Double.valueOf(getRotation());

    case SCALE:
      return getScale();

    case TRANSLATION:
      return getTranslation();

    case OPACITY:
      return Double.valueOf(getOpacity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAME_TIME:
      return isSetFrameTime();
    case IMAGE_ID:
      return isSetImageId();
    case POLYGON_ID:
      return isSetPolygonId();
    case ROTATION:
      return isSetRotation();
    case SCALE:
      return isSetScale();
    case TRANSLATION:
      return isSetTranslation();
    case OPACITY:
      return isSetOpacity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Keyframe)
      return this.equals((Keyframe)that);
    return false;
  }

  public boolean equals(Keyframe that) {
    if (that == null)
      return false;

    boolean this_present_frameTime = true;
    boolean that_present_frameTime = true;
    if (this_present_frameTime || that_present_frameTime) {
      if (!(this_present_frameTime && that_present_frameTime))
        return false;
      if (this.frameTime != that.frameTime)
        return false;
    }

    boolean this_present_imageId = true && this.isSetImageId();
    boolean that_present_imageId = true && that.isSetImageId();
    if (this_present_imageId || that_present_imageId) {
      if (!(this_present_imageId && that_present_imageId))
        return false;
      if (!this.imageId.equals(that.imageId))
        return false;
    }

    boolean this_present_polygonId = true && this.isSetPolygonId();
    boolean that_present_polygonId = true && that.isSetPolygonId();
    if (this_present_polygonId || that_present_polygonId) {
      if (!(this_present_polygonId && that_present_polygonId))
        return false;
      if (!this.polygonId.equals(that.polygonId))
        return false;
    }

    boolean this_present_rotation = true;
    boolean that_present_rotation = true;
    if (this_present_rotation || that_present_rotation) {
      if (!(this_present_rotation && that_present_rotation))
        return false;
      if (this.rotation != that.rotation)
        return false;
    }

    boolean this_present_scale = true && this.isSetScale();
    boolean that_present_scale = true && that.isSetScale();
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (!this.scale.equals(that.scale))
        return false;
    }

    boolean this_present_translation = true && this.isSetTranslation();
    boolean that_present_translation = true && that.isSetTranslation();
    if (this_present_translation || that_present_translation) {
      if (!(this_present_translation && that_present_translation))
        return false;
      if (!this.translation.equals(that.translation))
        return false;
    }

    boolean this_present_opacity = true;
    boolean that_present_opacity = true;
    if (this_present_opacity || that_present_opacity) {
      if (!(this_present_opacity && that_present_opacity))
        return false;
      if (this.opacity != that.opacity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Keyframe other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Keyframe typedOther = (Keyframe)other;

    lastComparison = Boolean.valueOf(isSetFrameTime()).compareTo(typedOther.isSetFrameTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameTime, typedOther.frameTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageId()).compareTo(typedOther.isSetImageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageId, typedOther.imageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolygonId()).compareTo(typedOther.isSetPolygonId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolygonId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polygonId, typedOther.polygonId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRotation()).compareTo(typedOther.isSetRotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rotation, typedOther.rotation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScale()).compareTo(typedOther.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, typedOther.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranslation()).compareTo(typedOther.isSetTranslation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranslation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.translation, typedOther.translation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpacity()).compareTo(typedOther.isSetOpacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opacity, typedOther.opacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Keyframe(");
    boolean first = true;

    sb.append("frameTime:");
    sb.append(this.frameTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageId:");
    if (this.imageId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("polygonId:");
    if (this.polygonId == null) {
      sb.append("null");
    } else {
      sb.append(this.polygonId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rotation:");
    sb.append(this.rotation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scale:");
    if (this.scale == null) {
      sb.append("null");
    } else {
      sb.append(this.scale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("translation:");
    if (this.translation == null) {
      sb.append("null");
    } else {
      sb.append(this.translation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opacity:");
    sb.append(this.opacity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (scale != null) {
      scale.validate();
    }
    if (translation != null) {
      translation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeyframeStandardSchemeFactory implements SchemeFactory {
    public KeyframeStandardScheme getScheme() {
      return new KeyframeStandardScheme();
    }
  }

  private static class KeyframeStandardScheme extends StandardScheme<Keyframe> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Keyframe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAME_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.frameTime = iprot.readI64();
              struct.setFrameTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageId = iprot.readString();
              struct.setImageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLYGON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.polygonId = iprot.readString();
              struct.setPolygonIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ROTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rotation = iprot.readDouble();
              struct.setRotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scale = new Point();
              struct.scale.read(iprot);
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // TRANSLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.translation = new Point();
              struct.translation.read(iprot);
              struct.setTranslationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // OPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.opacity = iprot.readDouble();
              struct.setOpacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Keyframe struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRAME_TIME_FIELD_DESC);
      oprot.writeI64(struct.frameTime);
      oprot.writeFieldEnd();
      if (struct.imageId != null) {
        oprot.writeFieldBegin(IMAGE_ID_FIELD_DESC);
        oprot.writeString(struct.imageId);
        oprot.writeFieldEnd();
      }
      if (struct.polygonId != null) {
        oprot.writeFieldBegin(POLYGON_ID_FIELD_DESC);
        oprot.writeString(struct.polygonId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROTATION_FIELD_DESC);
      oprot.writeDouble(struct.rotation);
      oprot.writeFieldEnd();
      if (struct.scale != null) {
        oprot.writeFieldBegin(SCALE_FIELD_DESC);
        struct.scale.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.translation != null) {
        oprot.writeFieldBegin(TRANSLATION_FIELD_DESC);
        struct.translation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPACITY_FIELD_DESC);
      oprot.writeDouble(struct.opacity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeyframeTupleSchemeFactory implements SchemeFactory {
    public KeyframeTupleScheme getScheme() {
      return new KeyframeTupleScheme();
    }
  }

  private static class KeyframeTupleScheme extends TupleScheme<Keyframe> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Keyframe struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrameTime()) {
        optionals.set(0);
      }
      if (struct.isSetImageId()) {
        optionals.set(1);
      }
      if (struct.isSetPolygonId()) {
        optionals.set(2);
      }
      if (struct.isSetRotation()) {
        optionals.set(3);
      }
      if (struct.isSetScale()) {
        optionals.set(4);
      }
      if (struct.isSetTranslation()) {
        optionals.set(5);
      }
      if (struct.isSetOpacity()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFrameTime()) {
        oprot.writeI64(struct.frameTime);
      }
      if (struct.isSetImageId()) {
        oprot.writeString(struct.imageId);
      }
      if (struct.isSetPolygonId()) {
        oprot.writeString(struct.polygonId);
      }
      if (struct.isSetRotation()) {
        oprot.writeDouble(struct.rotation);
      }
      if (struct.isSetScale()) {
        struct.scale.write(oprot);
      }
      if (struct.isSetTranslation()) {
        struct.translation.write(oprot);
      }
      if (struct.isSetOpacity()) {
        oprot.writeDouble(struct.opacity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Keyframe struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.frameTime = iprot.readI64();
        struct.setFrameTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imageId = iprot.readString();
        struct.setImageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.polygonId = iprot.readString();
        struct.setPolygonIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rotation = iprot.readDouble();
        struct.setRotationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.scale = new Point();
        struct.scale.read(iprot);
        struct.setScaleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.translation = new Point();
        struct.translation.read(iprot);
        struct.setTranslationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.opacity = iprot.readDouble();
        struct.setOpacityIsSet(true);
      }
    }
  }

}

