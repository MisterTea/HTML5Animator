/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Polygon implements org.apache.thrift.TBase<Polygon, Polygon._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Polygon");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("vertices", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField LINE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lineColor", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField FILL_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fillColor", org.apache.thrift.protocol.TType.STRUCT, (short)102);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolygonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolygonTupleSchemeFactory());
  }

  public String id; // required
  public List<Point> vertices; // required
  public Color lineColor; // required
  public Color fillColor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    VERTICES((short)100, "vertices"),
    LINE_COLOR((short)101, "lineColor"),
    FILL_COLOR((short)102, "fillColor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 100: // VERTICES
          return VERTICES;
        case 101: // LINE_COLOR
          return LINE_COLOR;
        case 102: // FILL_COLOR
          return FILL_COLOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERTICES, new org.apache.thrift.meta_data.FieldMetaData("vertices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class))));
    tmpMap.put(_Fields.LINE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("lineColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Color.class)));
    tmpMap.put(_Fields.FILL_COLOR, new org.apache.thrift.meta_data.FieldMetaData("fillColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Color.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Polygon.class, metaDataMap);
  }

  public Polygon() {
  }

  public Polygon(
    String id,
    List<Point> vertices,
    Color lineColor,
    Color fillColor)
  {
    this();
    this.id = id;
    this.vertices = vertices;
    this.lineColor = lineColor;
    this.fillColor = fillColor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Polygon(Polygon other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetVertices()) {
      List<Point> __this__vertices = new ArrayList<Point>();
      for (Point other_element : other.vertices) {
        __this__vertices.add(new Point(other_element));
      }
      this.vertices = __this__vertices;
    }
    if (other.isSetLineColor()) {
      this.lineColor = new Color(other.lineColor);
    }
    if (other.isSetFillColor()) {
      this.fillColor = new Color(other.fillColor);
    }
  }

  public Polygon deepCopy() {
    return new Polygon(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.vertices = null;
    this.lineColor = null;
    this.fillColor = null;
  }

  public String getId() {
    return this.id;
  }

  public Polygon setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getVerticesSize() {
    return (this.vertices == null) ? 0 : this.vertices.size();
  }

  public java.util.Iterator<Point> getVerticesIterator() {
    return (this.vertices == null) ? null : this.vertices.iterator();
  }

  public void addToVertices(Point elem) {
    if (this.vertices == null) {
      this.vertices = new ArrayList<Point>();
    }
    this.vertices.add(elem);
  }

  public List<Point> getVertices() {
    return this.vertices;
  }

  public Polygon setVertices(List<Point> vertices) {
    this.vertices = vertices;
    return this;
  }

  public void unsetVertices() {
    this.vertices = null;
  }

  /** Returns true if field vertices is set (has been assigned a value) and false otherwise */
  public boolean isSetVertices() {
    return this.vertices != null;
  }

  public void setVerticesIsSet(boolean value) {
    if (!value) {
      this.vertices = null;
    }
  }

  public Color getLineColor() {
    return this.lineColor;
  }

  public Polygon setLineColor(Color lineColor) {
    this.lineColor = lineColor;
    return this;
  }

  public void unsetLineColor() {
    this.lineColor = null;
  }

  /** Returns true if field lineColor is set (has been assigned a value) and false otherwise */
  public boolean isSetLineColor() {
    return this.lineColor != null;
  }

  public void setLineColorIsSet(boolean value) {
    if (!value) {
      this.lineColor = null;
    }
  }

  public Color getFillColor() {
    return this.fillColor;
  }

  public Polygon setFillColor(Color fillColor) {
    this.fillColor = fillColor;
    return this;
  }

  public void unsetFillColor() {
    this.fillColor = null;
  }

  /** Returns true if field fillColor is set (has been assigned a value) and false otherwise */
  public boolean isSetFillColor() {
    return this.fillColor != null;
  }

  public void setFillColorIsSet(boolean value) {
    if (!value) {
      this.fillColor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case VERTICES:
      if (value == null) {
        unsetVertices();
      } else {
        setVertices((List<Point>)value);
      }
      break;

    case LINE_COLOR:
      if (value == null) {
        unsetLineColor();
      } else {
        setLineColor((Color)value);
      }
      break;

    case FILL_COLOR:
      if (value == null) {
        unsetFillColor();
      } else {
        setFillColor((Color)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case VERTICES:
      return getVertices();

    case LINE_COLOR:
      return getLineColor();

    case FILL_COLOR:
      return getFillColor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case VERTICES:
      return isSetVertices();
    case LINE_COLOR:
      return isSetLineColor();
    case FILL_COLOR:
      return isSetFillColor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Polygon)
      return this.equals((Polygon)that);
    return false;
  }

  public boolean equals(Polygon that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_vertices = true && this.isSetVertices();
    boolean that_present_vertices = true && that.isSetVertices();
    if (this_present_vertices || that_present_vertices) {
      if (!(this_present_vertices && that_present_vertices))
        return false;
      if (!this.vertices.equals(that.vertices))
        return false;
    }

    boolean this_present_lineColor = true && this.isSetLineColor();
    boolean that_present_lineColor = true && that.isSetLineColor();
    if (this_present_lineColor || that_present_lineColor) {
      if (!(this_present_lineColor && that_present_lineColor))
        return false;
      if (!this.lineColor.equals(that.lineColor))
        return false;
    }

    boolean this_present_fillColor = true && this.isSetFillColor();
    boolean that_present_fillColor = true && that.isSetFillColor();
    if (this_present_fillColor || that_present_fillColor) {
      if (!(this_present_fillColor && that_present_fillColor))
        return false;
      if (!this.fillColor.equals(that.fillColor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Polygon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Polygon typedOther = (Polygon)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVertices()).compareTo(typedOther.isSetVertices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertices, typedOther.vertices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineColor()).compareTo(typedOther.isSetLineColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineColor, typedOther.lineColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFillColor()).compareTo(typedOther.isSetFillColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFillColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fillColor, typedOther.fillColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Polygon(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vertices:");
    if (this.vertices == null) {
      sb.append("null");
    } else {
      sb.append(this.vertices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineColor:");
    if (this.lineColor == null) {
      sb.append("null");
    } else {
      sb.append(this.lineColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fillColor:");
    if (this.fillColor == null) {
      sb.append("null");
    } else {
      sb.append(this.fillColor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lineColor != null) {
      lineColor.validate();
    }
    if (fillColor != null) {
      fillColor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolygonStandardSchemeFactory implements SchemeFactory {
    public PolygonStandardScheme getScheme() {
      return new PolygonStandardScheme();
    }
  }

  private static class PolygonStandardScheme extends StandardScheme<Polygon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Polygon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // VERTICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.vertices = new ArrayList<Point>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  Point _elem56; // optional
                  _elem56 = new Point();
                  _elem56.read(iprot);
                  struct.vertices.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setVerticesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // LINE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lineColor = new Color();
              struct.lineColor.read(iprot);
              struct.setLineColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // FILL_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fillColor = new Color();
              struct.fillColor.read(iprot);
              struct.setFillColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Polygon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.vertices != null) {
        oprot.writeFieldBegin(VERTICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vertices.size()));
          for (Point _iter57 : struct.vertices)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lineColor != null) {
        oprot.writeFieldBegin(LINE_COLOR_FIELD_DESC);
        struct.lineColor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fillColor != null) {
        oprot.writeFieldBegin(FILL_COLOR_FIELD_DESC);
        struct.fillColor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolygonTupleSchemeFactory implements SchemeFactory {
    public PolygonTupleScheme getScheme() {
      return new PolygonTupleScheme();
    }
  }

  private static class PolygonTupleScheme extends TupleScheme<Polygon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Polygon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetVertices()) {
        optionals.set(1);
      }
      if (struct.isSetLineColor()) {
        optionals.set(2);
      }
      if (struct.isSetFillColor()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetVertices()) {
        {
          oprot.writeI32(struct.vertices.size());
          for (Point _iter58 : struct.vertices)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetLineColor()) {
        struct.lineColor.write(oprot);
      }
      if (struct.isSetFillColor()) {
        struct.fillColor.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Polygon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vertices = new ArrayList<Point>(_list59.size);
          for (int _i60 = 0; _i60 < _list59.size; ++_i60)
          {
            Point _elem61; // optional
            _elem61 = new Point();
            _elem61.read(iprot);
            struct.vertices.add(_elem61);
          }
        }
        struct.setVerticesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lineColor = new Color();
        struct.lineColor.read(iprot);
        struct.setLineColorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fillColor = new Color();
        struct.fillColor.read(iprot);
        struct.setFillColorIsSet(true);
      }
    }
  }

}

