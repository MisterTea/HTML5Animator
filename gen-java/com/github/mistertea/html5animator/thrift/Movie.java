/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.html5animator.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Movie implements org.apache.thrift.TBase<Movie, Movie._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Movie");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPOSER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("composerIds", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField ACCESS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessIds", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField MUSIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("musicId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("layers", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField FRAME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("frameMs", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRUCT, (short)102);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MovieStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MovieTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String creatorId; // required
  public Set<String> composerIds; // required
  public Set<String> accessIds; // required
  public String musicId; // required
  public List<Layer> layers; // required
  public int frameMs; // required
  public Point size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CREATOR_ID((short)3, "creatorId"),
    COMPOSER_IDS((short)4, "composerIds"),
    ACCESS_IDS((short)5, "accessIds"),
    MUSIC_ID((short)6, "musicId"),
    LAYERS((short)100, "layers"),
    FRAME_MS((short)101, "frameMs"),
    SIZE((short)102, "size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CREATOR_ID
          return CREATOR_ID;
        case 4: // COMPOSER_IDS
          return COMPOSER_IDS;
        case 5: // ACCESS_IDS
          return ACCESS_IDS;
        case 6: // MUSIC_ID
          return MUSIC_ID;
        case 100: // LAYERS
          return LAYERS;
        case 101: // FRAME_MS
          return FRAME_MS;
        case 102: // SIZE
          return SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAMEMS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOSER_IDS, new org.apache.thrift.meta_data.FieldMetaData("composerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACCESS_IDS, new org.apache.thrift.meta_data.FieldMetaData("accessIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MUSIC_ID, new org.apache.thrift.meta_data.FieldMetaData("musicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAYERS, new org.apache.thrift.meta_data.FieldMetaData("layers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Layer.class))));
    tmpMap.put(_Fields.FRAME_MS, new org.apache.thrift.meta_data.FieldMetaData("frameMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Movie.class, metaDataMap);
  }

  public Movie() {
    this.composerIds = new HashSet<String>();

    this.accessIds = new HashSet<String>();

    this.layers = new ArrayList<Layer>();

    this.frameMs = 100;

  }

  public Movie(
    String id,
    String name,
    String creatorId,
    Set<String> composerIds,
    Set<String> accessIds,
    String musicId,
    List<Layer> layers,
    int frameMs,
    Point size)
  {
    this();
    this.id = id;
    this.name = name;
    this.creatorId = creatorId;
    this.composerIds = composerIds;
    this.accessIds = accessIds;
    this.musicId = musicId;
    this.layers = layers;
    this.frameMs = frameMs;
    setFrameMsIsSet(true);
    this.size = size;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Movie(Movie other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }
    if (other.isSetComposerIds()) {
      Set<String> __this__composerIds = new HashSet<String>();
      for (String other_element : other.composerIds) {
        __this__composerIds.add(other_element);
      }
      this.composerIds = __this__composerIds;
    }
    if (other.isSetAccessIds()) {
      Set<String> __this__accessIds = new HashSet<String>();
      for (String other_element : other.accessIds) {
        __this__accessIds.add(other_element);
      }
      this.accessIds = __this__accessIds;
    }
    if (other.isSetMusicId()) {
      this.musicId = other.musicId;
    }
    if (other.isSetLayers()) {
      List<Layer> __this__layers = new ArrayList<Layer>();
      for (Layer other_element : other.layers) {
        __this__layers.add(new Layer(other_element));
      }
      this.layers = __this__layers;
    }
    this.frameMs = other.frameMs;
    if (other.isSetSize()) {
      this.size = new Point(other.size);
    }
  }

  public Movie deepCopy() {
    return new Movie(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.creatorId = null;
    this.composerIds = new HashSet<String>();

    this.accessIds = new HashSet<String>();

    this.musicId = null;
    this.layers = new ArrayList<Layer>();

    this.frameMs = 100;

    this.size = null;
  }

  public String getId() {
    return this.id;
  }

  public Movie setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Movie setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCreatorId() {
    return this.creatorId;
  }

  public Movie setCreatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public int getComposerIdsSize() {
    return (this.composerIds == null) ? 0 : this.composerIds.size();
  }

  public java.util.Iterator<String> getComposerIdsIterator() {
    return (this.composerIds == null) ? null : this.composerIds.iterator();
  }

  public void addToComposerIds(String elem) {
    if (this.composerIds == null) {
      this.composerIds = new HashSet<String>();
    }
    this.composerIds.add(elem);
  }

  public Set<String> getComposerIds() {
    return this.composerIds;
  }

  public Movie setComposerIds(Set<String> composerIds) {
    this.composerIds = composerIds;
    return this;
  }

  public void unsetComposerIds() {
    this.composerIds = null;
  }

  /** Returns true if field composerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetComposerIds() {
    return this.composerIds != null;
  }

  public void setComposerIdsIsSet(boolean value) {
    if (!value) {
      this.composerIds = null;
    }
  }

  public int getAccessIdsSize() {
    return (this.accessIds == null) ? 0 : this.accessIds.size();
  }

  public java.util.Iterator<String> getAccessIdsIterator() {
    return (this.accessIds == null) ? null : this.accessIds.iterator();
  }

  public void addToAccessIds(String elem) {
    if (this.accessIds == null) {
      this.accessIds = new HashSet<String>();
    }
    this.accessIds.add(elem);
  }

  public Set<String> getAccessIds() {
    return this.accessIds;
  }

  public Movie setAccessIds(Set<String> accessIds) {
    this.accessIds = accessIds;
    return this;
  }

  public void unsetAccessIds() {
    this.accessIds = null;
  }

  /** Returns true if field accessIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessIds() {
    return this.accessIds != null;
  }

  public void setAccessIdsIsSet(boolean value) {
    if (!value) {
      this.accessIds = null;
    }
  }

  public String getMusicId() {
    return this.musicId;
  }

  public Movie setMusicId(String musicId) {
    this.musicId = musicId;
    return this;
  }

  public void unsetMusicId() {
    this.musicId = null;
  }

  /** Returns true if field musicId is set (has been assigned a value) and false otherwise */
  public boolean isSetMusicId() {
    return this.musicId != null;
  }

  public void setMusicIdIsSet(boolean value) {
    if (!value) {
      this.musicId = null;
    }
  }

  public int getLayersSize() {
    return (this.layers == null) ? 0 : this.layers.size();
  }

  public java.util.Iterator<Layer> getLayersIterator() {
    return (this.layers == null) ? null : this.layers.iterator();
  }

  public void addToLayers(Layer elem) {
    if (this.layers == null) {
      this.layers = new ArrayList<Layer>();
    }
    this.layers.add(elem);
  }

  public List<Layer> getLayers() {
    return this.layers;
  }

  public Movie setLayers(List<Layer> layers) {
    this.layers = layers;
    return this;
  }

  public void unsetLayers() {
    this.layers = null;
  }

  /** Returns true if field layers is set (has been assigned a value) and false otherwise */
  public boolean isSetLayers() {
    return this.layers != null;
  }

  public void setLayersIsSet(boolean value) {
    if (!value) {
      this.layers = null;
    }
  }

  public int getFrameMs() {
    return this.frameMs;
  }

  public Movie setFrameMs(int frameMs) {
    this.frameMs = frameMs;
    setFrameMsIsSet(true);
    return this;
  }

  public void unsetFrameMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMEMS_ISSET_ID);
  }

  /** Returns true if field frameMs is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameMs() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMEMS_ISSET_ID);
  }

  public void setFrameMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMEMS_ISSET_ID, value);
  }

  public Point getSize() {
    return this.size;
  }

  public Movie setSize(Point size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case COMPOSER_IDS:
      if (value == null) {
        unsetComposerIds();
      } else {
        setComposerIds((Set<String>)value);
      }
      break;

    case ACCESS_IDS:
      if (value == null) {
        unsetAccessIds();
      } else {
        setAccessIds((Set<String>)value);
      }
      break;

    case MUSIC_ID:
      if (value == null) {
        unsetMusicId();
      } else {
        setMusicId((String)value);
      }
      break;

    case LAYERS:
      if (value == null) {
        unsetLayers();
      } else {
        setLayers((List<Layer>)value);
      }
      break;

    case FRAME_MS:
      if (value == null) {
        unsetFrameMs();
      } else {
        setFrameMs((Integer)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Point)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case CREATOR_ID:
      return getCreatorId();

    case COMPOSER_IDS:
      return getComposerIds();

    case ACCESS_IDS:
      return getAccessIds();

    case MUSIC_ID:
      return getMusicId();

    case LAYERS:
      return getLayers();

    case FRAME_MS:
      return Integer.valueOf(getFrameMs());

    case SIZE:
      return getSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CREATOR_ID:
      return isSetCreatorId();
    case COMPOSER_IDS:
      return isSetComposerIds();
    case ACCESS_IDS:
      return isSetAccessIds();
    case MUSIC_ID:
      return isSetMusicId();
    case LAYERS:
      return isSetLayers();
    case FRAME_MS:
      return isSetFrameMs();
    case SIZE:
      return isSetSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Movie)
      return this.equals((Movie)that);
    return false;
  }

  public boolean equals(Movie that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_composerIds = true && this.isSetComposerIds();
    boolean that_present_composerIds = true && that.isSetComposerIds();
    if (this_present_composerIds || that_present_composerIds) {
      if (!(this_present_composerIds && that_present_composerIds))
        return false;
      if (!this.composerIds.equals(that.composerIds))
        return false;
    }

    boolean this_present_accessIds = true && this.isSetAccessIds();
    boolean that_present_accessIds = true && that.isSetAccessIds();
    if (this_present_accessIds || that_present_accessIds) {
      if (!(this_present_accessIds && that_present_accessIds))
        return false;
      if (!this.accessIds.equals(that.accessIds))
        return false;
    }

    boolean this_present_musicId = true && this.isSetMusicId();
    boolean that_present_musicId = true && that.isSetMusicId();
    if (this_present_musicId || that_present_musicId) {
      if (!(this_present_musicId && that_present_musicId))
        return false;
      if (!this.musicId.equals(that.musicId))
        return false;
    }

    boolean this_present_layers = true && this.isSetLayers();
    boolean that_present_layers = true && that.isSetLayers();
    if (this_present_layers || that_present_layers) {
      if (!(this_present_layers && that_present_layers))
        return false;
      if (!this.layers.equals(that.layers))
        return false;
    }

    boolean this_present_frameMs = true;
    boolean that_present_frameMs = true;
    if (this_present_frameMs || that_present_frameMs) {
      if (!(this_present_frameMs && that_present_frameMs))
        return false;
      if (this.frameMs != that.frameMs)
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Movie other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Movie typedOther = (Movie)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(typedOther.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, typedOther.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposerIds()).compareTo(typedOther.isSetComposerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composerIds, typedOther.composerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessIds()).compareTo(typedOther.isSetAccessIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessIds, typedOther.accessIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusicId()).compareTo(typedOther.isSetMusicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.musicId, typedOther.musicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLayers()).compareTo(typedOther.isSetLayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layers, typedOther.layers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameMs()).compareTo(typedOther.isSetFrameMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameMs, typedOther.frameMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Movie(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    if (this.creatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("composerIds:");
    if (this.composerIds == null) {
      sb.append("null");
    } else {
      sb.append(this.composerIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessIds:");
    if (this.accessIds == null) {
      sb.append("null");
    } else {
      sb.append(this.accessIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("musicId:");
    if (this.musicId == null) {
      sb.append("null");
    } else {
      sb.append(this.musicId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("layers:");
    if (this.layers == null) {
      sb.append("null");
    } else {
      sb.append(this.layers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameMs:");
    sb.append(this.frameMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    if (this.size == null) {
      sb.append("null");
    } else {
      sb.append(this.size);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (size != null) {
      size.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MovieStandardSchemeFactory implements SchemeFactory {
    public MovieStandardScheme getScheme() {
      return new MovieStandardScheme();
    }
  }

  private static class MovieStandardScheme extends StandardScheme<Movie> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Movie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPOSER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set78 = iprot.readSetBegin();
                struct.composerIds = new HashSet<String>(2*_set78.size);
                for (int _i79 = 0; _i79 < _set78.size; ++_i79)
                {
                  String _elem80; // optional
                  _elem80 = iprot.readString();
                  struct.composerIds.add(_elem80);
                }
                iprot.readSetEnd();
              }
              struct.setComposerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCESS_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set81 = iprot.readSetBegin();
                struct.accessIds = new HashSet<String>(2*_set81.size);
                for (int _i82 = 0; _i82 < _set81.size; ++_i82)
                {
                  String _elem83; // optional
                  _elem83 = iprot.readString();
                  struct.accessIds.add(_elem83);
                }
                iprot.readSetEnd();
              }
              struct.setAccessIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MUSIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.musicId = iprot.readString();
              struct.setMusicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // LAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.layers = new ArrayList<Layer>(_list84.size);
                for (int _i85 = 0; _i85 < _list84.size; ++_i85)
                {
                  Layer _elem86; // optional
                  _elem86 = new Layer();
                  _elem86.read(iprot);
                  struct.layers.add(_elem86);
                }
                iprot.readListEnd();
              }
              struct.setLayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FRAME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameMs = iprot.readI32();
              struct.setFrameMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.size = new Point();
              struct.size.read(iprot);
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Movie struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.composerIds != null) {
        oprot.writeFieldBegin(COMPOSER_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.composerIds.size()));
          for (String _iter87 : struct.composerIds)
          {
            oprot.writeString(_iter87);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.accessIds != null) {
        oprot.writeFieldBegin(ACCESS_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.accessIds.size()));
          for (String _iter88 : struct.accessIds)
          {
            oprot.writeString(_iter88);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.musicId != null) {
        oprot.writeFieldBegin(MUSIC_ID_FIELD_DESC);
        oprot.writeString(struct.musicId);
        oprot.writeFieldEnd();
      }
      if (struct.layers != null) {
        oprot.writeFieldBegin(LAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.layers.size()));
          for (Layer _iter89 : struct.layers)
          {
            _iter89.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRAME_MS_FIELD_DESC);
      oprot.writeI32(struct.frameMs);
      oprot.writeFieldEnd();
      if (struct.size != null) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        struct.size.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MovieTupleSchemeFactory implements SchemeFactory {
    public MovieTupleScheme getScheme() {
      return new MovieTupleScheme();
    }
  }

  private static class MovieTupleScheme extends TupleScheme<Movie> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCreatorId()) {
        optionals.set(2);
      }
      if (struct.isSetComposerIds()) {
        optionals.set(3);
      }
      if (struct.isSetAccessIds()) {
        optionals.set(4);
      }
      if (struct.isSetMusicId()) {
        optionals.set(5);
      }
      if (struct.isSetLayers()) {
        optionals.set(6);
      }
      if (struct.isSetFrameMs()) {
        optionals.set(7);
      }
      if (struct.isSetSize()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCreatorId()) {
        oprot.writeString(struct.creatorId);
      }
      if (struct.isSetComposerIds()) {
        {
          oprot.writeI32(struct.composerIds.size());
          for (String _iter90 : struct.composerIds)
          {
            oprot.writeString(_iter90);
          }
        }
      }
      if (struct.isSetAccessIds()) {
        {
          oprot.writeI32(struct.accessIds.size());
          for (String _iter91 : struct.accessIds)
          {
            oprot.writeString(_iter91);
          }
        }
      }
      if (struct.isSetMusicId()) {
        oprot.writeString(struct.musicId);
      }
      if (struct.isSetLayers()) {
        {
          oprot.writeI32(struct.layers.size());
          for (Layer _iter92 : struct.layers)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSetFrameMs()) {
        oprot.writeI32(struct.frameMs);
      }
      if (struct.isSetSize()) {
        struct.size.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creatorId = iprot.readString();
        struct.setCreatorIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set93 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.composerIds = new HashSet<String>(2*_set93.size);
          for (int _i94 = 0; _i94 < _set93.size; ++_i94)
          {
            String _elem95; // optional
            _elem95 = iprot.readString();
            struct.composerIds.add(_elem95);
          }
        }
        struct.setComposerIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set96 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.accessIds = new HashSet<String>(2*_set96.size);
          for (int _i97 = 0; _i97 < _set96.size; ++_i97)
          {
            String _elem98; // optional
            _elem98 = iprot.readString();
            struct.accessIds.add(_elem98);
          }
        }
        struct.setAccessIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.musicId = iprot.readString();
        struct.setMusicIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.layers = new ArrayList<Layer>(_list99.size);
          for (int _i100 = 0; _i100 < _list99.size; ++_i100)
          {
            Layer _elem101; // optional
            _elem101 = new Layer();
            _elem101.read(iprot);
            struct.layers.add(_elem101);
          }
        }
        struct.setLayersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.frameMs = iprot.readI32();
        struct.setFrameMsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.size = new Point();
        struct.size.read(iprot);
        struct.setSizeIsSet(true);
      }
    }
  }

}

